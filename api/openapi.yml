openapi: 3.0.3
info:
  title: dobermann/backend
  description: Dobermann's backend
  termsOfService: https://github.com/flowck/dobermann
  contact:
    email: firmino.changani@gmail.com
  license:
    name: MIT
    url: https://github.com/flowck/dobermann/LICENSE.md
  version: 0.0.1
externalDocs:
  description: https://github.com/flowck/dobermann/README.md
  url: https://github.com/flowck/dobermann
servers:
  - url: http://localhost:8080
paths:
  /monitors:
    get:
      tags:
        - Monitors
      operationId: getAllMonitors
      summary: Get all monitors in a with pagination
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllMonitorsPayload'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Monitors
      operationId: createMonitor
      summary: Create a new monitor
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateMonitorRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
  /monitors/{monitorID}:
    get:
      tags:
        - Monitors
      operationId: getMonitorByID
      summary: Get all monitors in a with pagination
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllMonitorByIdPayload'
        default:
          $ref: '#/components/responses/DefaultError'
    post:
      tags:
        - Monitors
      operationId: toggleMonitorPause
      summary: Pause or unpause the monitor
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ToggleMonitorPauseRequest'
      responses:
        '204':
          description: OK
        default:
          $ref: '#/components/responses/DefaultError'
    put:
      tags:
        - Monitors
      operationId: editMonitor
      summary: Edit a monitor by id
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMonitorRequest'
      responses:
        '200':
          description: OK
        default:
          $ref: '#/components/responses/DefaultError'
    delete:
      tags:
        - Monitors
      operationId: deleteMonitor
      summary: Delete monitor
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      responses:
        '204':
          description: DELETED
        default:
          $ref: '#/components/responses/DefaultError'
  /monitors/{monitorID}/stats/response-times:
    get:
      tags:
        - Monitors
      operationId: getMonitorResponseTimeStats
      summary: Get the stats about the response time
      parameters:
        - name: monitorID
          in: path
          required: true
          schema:
            type: string
        - name: range_in_days
          in: query
          required: false
          schema:
            type: integer
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetMonitorResponseTimeStatsPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /incidents:
    get:
      tags:
        - Incidents
      operationId: getAllIncidents
      summary: Get all incidents
      parameters:
        - name: page
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
        - name: limit
          in: query
          required: false
          schema:
            type: integer
            minimum: 1
            maximum: 100
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetAllIncidentsPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /incidents/{incidentID}:
    get:
      tags:
        - Incidents
      operationId: getIncidentByID
      summary: Get an incident by id
      parameters:
        - name: incidentID
          in: path
          required: true
          schema:
            type: string
      security:
        - BearerAuth: [ ]
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/GetIncidentByByIdPayload'
        default:
          $ref: '#/components/responses/DefaultError'
  /webhooks/create-account:
    post:
      tags:
        - Auth
      operationId: createAccount
      summary: Creates a new account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAccountRequest'
      responses:
        '201':
          description: CREATED
        default:
          $ref: '#/components/responses/DefaultError'
components:
  schemas:
    BulkInviteMembersByEmail:
      required: [ emails ]
      properties:
        emails:
          type: array
          items:
            type: string
    GetProfileDetailsPayload:
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/User'
    User:
      required: [id, first_name, last_name, email, role, created_at]
      properties:
        id:
          type: string
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
        role:
          type: string
        created_at:
          type: string
          format: date-time
    ResponseTimeStat:
      required: [value, date, region]
      properties:
        value:
          type: integer
        date:
          type: string
          format: date-time
        region:
          type: string
    GetMonitorResponseTimeStatsPayload:
      required: [data]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/ResponseTimeStat'
    EditMonitorRequest:
      required: [endpoint_url, check_interval_in_seconds]
      properties:
        endpoint_url:
          type: string
        check_interval_in_seconds:
          type: integer
    ToggleMonitorPauseRequest:
      required: [pause]
      properties:
        pause:
          type: boolean
    GetAllMonitorsPayload:
      required: [page, per_page, page_count, total_count, data]
      properties:
        page:
          type: integer
        per_page:
          type: integer
        page_count:
          type: integer
        total_count:
          type: integer
          format: int64
        data:
          type: array
          items:
            $ref: '#/components/schemas/Monitor'
    GetAllMonitorByIdPayload:
      required: [ data ]
      properties:
        data:
          $ref: '#/components/schemas/Monitor'
    Monitor:
      required: [id, endpoint_url, is_endpoint_up, is_paused, incidents, check_interval_in_seconds, created_at]
      properties:
        id:
          type: string
        endpoint_url:
          type: string
        is_endpoint_up:
          type: boolean
        is_paused:
          type: boolean
        incidents:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
        created_at:
          type: string
          format: date-time
        last_checked_at:
          type: string
          format: date-time
        up_since:
          type: string
          format: date-time
        down_since:
          type: string
          format: date-time
        check_interval_in_seconds:
          type: integer
    Incident:
      required: [id, cause, checked_url, created_at]
      properties:
        id:
          type: string
        checked_url:
          type: string
        cause:
          type: string
        resolved_at:
          type: string
          format: date-time
        created_at:
          type: string
          format: date-time
    FullIncident:
      allOf:
        - $ref: '#/components/schemas/Incident'
        - type: object
          required: [monitor_id]
          properties:
            monitor_id:
              type: string
            response_status:
              type: integer
    CreateAccountRequest:
      type: object
      properties:
        data:
          type: object
          required: [id, password_enabled, two_factor_enabled]
          properties:
            birthday:
              type: string
              description: User's birthday (empty string if not set)
            created_at:
              type: integer
              description: Timestamp (epoch milliseconds) representing user creation time
            email_addresses:
              type: array
              items:
                type: object
                properties:
                  email_address:
                    type: string
                    description: User's email address
                  id:
                    type: string
                    description: Unique identifier for the email address
                  linked_to:
                    type: array
                    description: (Array is empty for this event)
                    items:
                      type: object
                      # Add properties for linked objects if needed
                  object:
                    type: string
                    description: Object type (always "email_address" for this event)
                  verification:
                    type: object
                    properties:
                      status:
                        type: string
                        description: Verification status (e.g., "verified", "unverified")
                      strategy:
                        type: string
                        description: Verification strategy (e.g., "ticket", "link")
            external_accounts:
              type: array
              description: (Array is empty for this event)
              items:
                type: object
                # Add properties for external accounts if needed
            external_id:
              type: string
              nullable: true
              description: User's external identifier
            first_name:
              type: string
              nullable: true
              description: User's first name
            gender:
              type: string
              description: User's gender (empty string if not set)
            id:
              type: string
              description: Unique identifier for the user
            image_url:
              type: string
              description: User's image URL (may be redacted)
            last_name:
              type: string
              nullable: true
              description: User's last name
            last_sign_in_at:
              type: integer
              nullable: true
              description: Timestamp (epoch milliseconds) representing last sign-in time
            object:
              type: string
              description: Object type (always "user" for this event)
            password_enabled:
              type: boolean
              description: Whether the user has password authentication enabled
            phone_numbers:
              type: array
              description: (Array is empty for this event)
              items:
                type: object
                # Add properties for phone numbers if needed
            primary_email_address_id:
              type: string
              nullable: true
              description: Unique identifier for the primary email address
            primary_phone_number_id:
              type: string
              nullable: true
              description: Unique identifier for the primary phone number (null if not set)
            primary_web3_wallet_id:
              type: string
              nullable: true
              description: Unique identifier for the primary web3 wallet (null if not set)
            private_metadata:
              type: object
              description: User's private metadata (empty object for this event)
            profile_image_url:
              type: string
              description: User's profile image URL (may be redacted)
            public_metadata:
              type: object
              description: User's public metadata (empty object for this event)
            two_factor_enabled:
              type: boolean
              description: Whether two-factor authentication is enabled
            unsafe_metadata:
              type: object
              description: User's unsafe metadata (empty object for this event)
            updated_at:
              type: integer
              description: Timestamp (epoch milliseconds) representing user update time
            username:
              type: string
              nullable: true
              description: Username (null if not set)
            web3_wallets:
              type: array
              description: (Array is empty for this event)
              items:
                type: object
                # Add properties for web3 wallets if needed
        object:
          type: string
          description: Event type (always "user.created" for this event)
        type:
          type: string
          description: Event type (always "user.created" for this event)
    CreateMonitorRequest:
      required: [endpoint_url, check_interval_in_seconds]
      properties:
        endpoint_url:
          type: string
        check_interval_in_seconds:
          type: integer
          minimum: 30
    GetIncidentByByIdPayload:
      required: [data]
      properties:
        data:
          $ref: '#/components/schemas/FullIncident'
    GetAllIncidentsPayload:
      required: [ page, per_page, page_count, total_count, data ]
      properties:
        data:
          type: array
          items:
            $ref: '#/components/schemas/Incident'
        page:
          type: integer
        per_page:
          type: integer
        page_count:
          type: integer
        total_count:
          type: integer
          format: int64
    GenericResponse:
      type: object
      required:
        - message
      properties:
        message:
          type: string
    ErrorResponse:
      type: object
      required: [error, message]
      properties:
        message:
          type: string
          description: A description about the error
        error:
          type: string
          description: Error custom error code such as 'email_in_use'
  responses:
    UnauthorizedError:
      description: 'Usually causes by an authentication token missing'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
    DefaultSuccess:
      description: 'Default message when an operation succeeds'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/GenericResponse'
    DefaultError:
      description: 'A generic error response'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/ErrorResponse'
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
