// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Data *struct {
		// Birthday User's birthday (empty string if not set)
		Birthday *string `json:"birthday,omitempty"`

		// CreatedAt Timestamp (epoch milliseconds) representing user creation time
		CreatedAt      *int `json:"created_at,omitempty"`
		EmailAddresses *[]struct {
			// EmailAddress User's email address
			EmailAddress *string `json:"email_address,omitempty"`

			// Id Unique identifier for the email address
			Id *string `json:"id,omitempty"`

			// LinkedTo (Array is empty for this event)
			LinkedTo *[]map[string]interface{} `json:"linked_to,omitempty"`

			// Object Object type (always "email_address" for this event)
			Object       *string `json:"object,omitempty"`
			Verification *struct {
				// Status Verification status (e.g., "verified", "unverified")
				Status *string `json:"status,omitempty"`

				// Strategy Verification strategy (e.g., "ticket", "link")
				Strategy *string `json:"strategy,omitempty"`
			} `json:"verification,omitempty"`
		} `json:"email_addresses,omitempty"`

		// ExternalAccounts (Array is empty for this event)
		ExternalAccounts *[]map[string]interface{} `json:"external_accounts,omitempty"`

		// ExternalId User's external identifier
		ExternalId *string `json:"external_id"`

		// FirstName User's first name
		FirstName *string `json:"first_name"`

		// Gender User's gender (empty string if not set)
		Gender *string `json:"gender,omitempty"`

		// Id Unique identifier for the user
		Id string `json:"id"`

		// ImageUrl User's image URL (may be redacted)
		ImageUrl *string `json:"image_url,omitempty"`

		// LastName User's last name
		LastName *string `json:"last_name"`

		// LastSignInAt Timestamp (epoch milliseconds) representing last sign-in time
		LastSignInAt *int `json:"last_sign_in_at"`

		// Object Object type (always "user" for this event)
		Object *string `json:"object,omitempty"`

		// PasswordEnabled Whether the user has password authentication enabled
		PasswordEnabled bool `json:"password_enabled"`

		// PhoneNumbers (Array is empty for this event)
		PhoneNumbers *[]map[string]interface{} `json:"phone_numbers,omitempty"`

		// PrimaryEmailAddressId Unique identifier for the primary email address
		PrimaryEmailAddressId *string `json:"primary_email_address_id"`

		// PrimaryPhoneNumberId Unique identifier for the primary phone number (null if not set)
		PrimaryPhoneNumberId *string `json:"primary_phone_number_id"`

		// PrimaryWeb3WalletId Unique identifier for the primary web3 wallet (null if not set)
		PrimaryWeb3WalletId *string `json:"primary_web3_wallet_id"`

		// PrivateMetadata User's private metadata (empty object for this event)
		PrivateMetadata *map[string]interface{} `json:"private_metadata,omitempty"`

		// ProfileImageUrl User's profile image URL (may be redacted)
		ProfileImageUrl *string `json:"profile_image_url,omitempty"`

		// PublicMetadata User's public metadata (empty object for this event)
		PublicMetadata *map[string]interface{} `json:"public_metadata,omitempty"`

		// TwoFactorEnabled Whether two-factor authentication is enabled
		TwoFactorEnabled bool `json:"two_factor_enabled"`

		// UnsafeMetadata User's unsafe metadata (empty object for this event)
		UnsafeMetadata *map[string]interface{} `json:"unsafe_metadata,omitempty"`

		// UpdatedAt Timestamp (epoch milliseconds) representing user update time
		UpdatedAt *int `json:"updated_at,omitempty"`

		// Username Username (null if not set)
		Username *string `json:"username"`

		// Web3Wallets (Array is empty for this event)
		Web3Wallets *[]map[string]interface{} `json:"web3_wallets,omitempty"`
	} `json:"data,omitempty"`

	// Object Event type (always "user.created" for this event)
	Object *string `json:"object,omitempty"`

	// Type Event type (always "user.created" for this event)
	Type *string `json:"type,omitempty"`
}

// CreateMonitorRequest defines model for CreateMonitorRequest.
type CreateMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// EditMonitorRequest defines model for EditMonitorRequest.
type EditMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// FullIncident defines model for FullIncident.
type FullIncident struct {
	Cause          string     `json:"cause"`
	CheckedUrl     string     `json:"checked_url"`
	CreatedAt      time.Time  `json:"created_at"`
	Id             string     `json:"id"`
	MonitorId      string     `json:"monitor_id"`
	ResolvedAt     *time.Time `json:"resolved_at,omitempty"`
	ResponseStatus *int       `json:"response_status,omitempty"`
}

// GetAllIncidentsPayload defines model for GetAllIncidentsPayload.
type GetAllIncidentsPayload struct {
	Data       []Incident `json:"data"`
	Page       int        `json:"page"`
	PageCount  int        `json:"page_count"`
	PerPage    int        `json:"per_page"`
	TotalCount int64      `json:"total_count"`
}

// GetAllMonitorByIdPayload defines model for GetAllMonitorByIdPayload.
type GetAllMonitorByIdPayload struct {
	Data Monitor `json:"data"`
}

// GetAllMonitorsPayload defines model for GetAllMonitorsPayload.
type GetAllMonitorsPayload struct {
	Data       []Monitor `json:"data"`
	Page       int       `json:"page"`
	PageCount  int       `json:"page_count"`
	PerPage    int       `json:"per_page"`
	TotalCount int64     `json:"total_count"`
}

// GetIncidentByByIdPayload defines model for GetIncidentByByIdPayload.
type GetIncidentByByIdPayload struct {
	Data FullIncident `json:"data"`
}

// GetMonitorResponseTimeStatsPayload defines model for GetMonitorResponseTimeStatsPayload.
type GetMonitorResponseTimeStatsPayload struct {
	Data []ResponseTimeStat `json:"data"`
}

// Incident defines model for Incident.
type Incident struct {
	Cause      string     `json:"cause"`
	CheckedUrl string     `json:"checked_url"`
	CreatedAt  time.Time  `json:"created_at"`
	Id         string     `json:"id"`
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`
}

// Monitor defines model for Monitor.
type Monitor struct {
	CheckIntervalInSeconds int        `json:"check_interval_in_seconds"`
	CreatedAt              time.Time  `json:"created_at"`
	DownSince              *time.Time `json:"down_since,omitempty"`
	EndpointUrl            string     `json:"endpoint_url"`
	Id                     string     `json:"id"`
	Incidents              []Incident `json:"incidents"`
	IsEndpointUp           bool       `json:"is_endpoint_up"`
	IsPaused               bool       `json:"is_paused"`
	LastCheckedAt          *time.Time `json:"last_checked_at,omitempty"`
	UpSince                *time.Time `json:"up_since,omitempty"`
}

// ResponseTimeStat defines model for ResponseTimeStat.
type ResponseTimeStat struct {
	Date   time.Time `json:"date"`
	Region string    `json:"region"`
	Value  int       `json:"value"`
}

// ToggleMonitorPauseRequest defines model for ToggleMonitorPauseRequest.
type ToggleMonitorPauseRequest struct {
	Pause bool `json:"pause"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetAllIncidentsParams defines parameters for GetAllIncidents.
type GetAllIncidentsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAllMonitorsParams defines parameters for GetAllMonitors.
type GetAllMonitorsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMonitorResponseTimeStatsParams defines parameters for GetMonitorResponseTimeStats.
type GetMonitorResponseTimeStatsParams struct {
	RangeInDays *int `form:"range_in_days,omitempty" json:"range_in_days,omitempty"`
}

// CreateMonitorJSONRequestBody defines body for CreateMonitor for application/json ContentType.
type CreateMonitorJSONRequestBody = CreateMonitorRequest

// ToggleMonitorPauseJSONRequestBody defines body for ToggleMonitorPause for application/json ContentType.
type ToggleMonitorPauseJSONRequestBody = ToggleMonitorPauseRequest

// EditMonitorJSONRequestBody defines body for EditMonitor for application/json ContentType.
type EditMonitorJSONRequestBody = EditMonitorRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// GetAllIncidents request
	GetAllIncidents(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentByID request
	GetIncidentByID(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMonitors request
	GetAllMonitors(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMonitorWithBody request with any body
	CreateMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMonitor(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMonitor request
	DeleteMonitor(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonitorByID request
	GetMonitorByID(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleMonitorPauseWithBody request with any body
	ToggleMonitorPauseWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToggleMonitorPause(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditMonitorWithBody request with any body
	EditMonitorWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditMonitor(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonitorResponseTimeStats request
	GetMonitorResponseTimeStats(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountWithBody request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) GetAllIncidents(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentByID(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentByIDRequest(c.Server, incidentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMonitors(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMonitorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitor(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMonitor(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMonitorRequest(c.Server, monitorID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonitorByID(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonitorByIDRequest(c.Server, monitorID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleMonitorPauseWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleMonitorPauseRequestWithBody(c.Server, monitorID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleMonitorPause(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleMonitorPauseRequest(c.Server, monitorID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMonitorWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMonitorRequestWithBody(c.Server, monitorID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMonitor(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMonitorRequest(c.Server, monitorID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonitorResponseTimeStats(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonitorResponseTimeStatsRequest(c.Server, monitorID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewGetAllIncidentsRequest generates requests for GetAllIncidents
func NewGetAllIncidentsRequest(server string, params *GetAllIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentByIDRequest generates requests for GetIncidentByID
func NewGetIncidentByIDRequest(server string, incidentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentID", runtime.ParamLocationPath, incidentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMonitorsRequest generates requests for GetAllMonitors
func NewGetAllMonitorsRequest(server string, params *GetAllMonitorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMonitorRequest calls the generic CreateMonitor builder with application/json body
func NewCreateMonitorRequest(server string, body CreateMonitorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMonitorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMonitorRequestWithBody generates requests for CreateMonitor with any type of body
func NewCreateMonitorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMonitorRequest generates requests for DeleteMonitor
func NewDeleteMonitorRequest(server string, monitorID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonitorByIDRequest generates requests for GetMonitorByID
func NewGetMonitorByIDRequest(server string, monitorID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleMonitorPauseRequest calls the generic ToggleMonitorPause builder with application/json body
func NewToggleMonitorPauseRequest(server string, monitorID string, body ToggleMonitorPauseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToggleMonitorPauseRequestWithBody(server, monitorID, "application/json", bodyReader)
}

// NewToggleMonitorPauseRequestWithBody generates requests for ToggleMonitorPause with any type of body
func NewToggleMonitorPauseRequestWithBody(server string, monitorID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEditMonitorRequest calls the generic EditMonitor builder with application/json body
func NewEditMonitorRequest(server string, monitorID string, body EditMonitorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditMonitorRequestWithBody(server, monitorID, "application/json", bodyReader)
}

// NewEditMonitorRequestWithBody generates requests for EditMonitor with any type of body
func NewEditMonitorRequestWithBody(server string, monitorID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMonitorResponseTimeStatsRequest generates requests for GetMonitorResponseTimeStats
func NewGetMonitorResponseTimeStatsRequest(server string, monitorID string, params *GetMonitorResponseTimeStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s/stats/response-times", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RangeInDays != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range_in_days", runtime.ParamLocationQuery, *params.RangeInDays); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/webhooks/create-account")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// GetAllIncidentsWithResponse request
	GetAllIncidentsWithResponse(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*GetAllIncidentsResponse, error)

	// GetIncidentByIDWithResponse request
	GetIncidentByIDWithResponse(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*GetIncidentByIDResponse, error)

	// GetAllMonitorsWithResponse request
	GetAllMonitorsWithResponse(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*GetAllMonitorsResponse, error)

	// CreateMonitorWithBodyWithResponse request with any body
	CreateMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error)

	CreateMonitorWithResponse(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error)

	// DeleteMonitorWithResponse request
	DeleteMonitorWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*DeleteMonitorResponse, error)

	// GetMonitorByIDWithResponse request
	GetMonitorByIDWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*GetMonitorByIDResponse, error)

	// ToggleMonitorPauseWithBodyWithResponse request with any body
	ToggleMonitorPauseWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error)

	ToggleMonitorPauseWithResponse(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error)

	// EditMonitorWithBodyWithResponse request with any body
	EditMonitorWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error)

	EditMonitorWithResponse(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error)

	// GetMonitorResponseTimeStatsWithResponse request
	GetMonitorResponseTimeStatsWithResponse(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*GetMonitorResponseTimeStatsResponse, error)

	// CreateAccountWithBodyWithResponse request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)
}

type GetAllIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllIncidentsPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetIncidentByByIdPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetIncidentByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMonitorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllMonitorsPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllMonitorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMonitorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonitorByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllMonitorByIdPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMonitorByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonitorByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleMonitorPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ToggleMonitorPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleMonitorPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r EditMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonitorResponseTimeStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMonitorResponseTimeStatsPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMonitorResponseTimeStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonitorResponseTimeStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// GetAllIncidentsWithResponse request returning *GetAllIncidentsResponse
func (c *ClientWithResponses) GetAllIncidentsWithResponse(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*GetAllIncidentsResponse, error) {
	rsp, err := c.GetAllIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllIncidentsResponse(rsp)
}

// GetIncidentByIDWithResponse request returning *GetIncidentByIDResponse
func (c *ClientWithResponses) GetIncidentByIDWithResponse(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*GetIncidentByIDResponse, error) {
	rsp, err := c.GetIncidentByID(ctx, incidentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentByIDResponse(rsp)
}

// GetAllMonitorsWithResponse request returning *GetAllMonitorsResponse
func (c *ClientWithResponses) GetAllMonitorsWithResponse(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*GetAllMonitorsResponse, error) {
	rsp, err := c.GetAllMonitors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMonitorsResponse(rsp)
}

// CreateMonitorWithBodyWithResponse request with arbitrary body returning *CreateMonitorResponse
func (c *ClientWithResponses) CreateMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error) {
	rsp, err := c.CreateMonitorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitorResponse(rsp)
}

func (c *ClientWithResponses) CreateMonitorWithResponse(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error) {
	rsp, err := c.CreateMonitor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitorResponse(rsp)
}

// DeleteMonitorWithResponse request returning *DeleteMonitorResponse
func (c *ClientWithResponses) DeleteMonitorWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*DeleteMonitorResponse, error) {
	rsp, err := c.DeleteMonitor(ctx, monitorID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMonitorResponse(rsp)
}

// GetMonitorByIDWithResponse request returning *GetMonitorByIDResponse
func (c *ClientWithResponses) GetMonitorByIDWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*GetMonitorByIDResponse, error) {
	rsp, err := c.GetMonitorByID(ctx, monitorID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonitorByIDResponse(rsp)
}

// ToggleMonitorPauseWithBodyWithResponse request with arbitrary body returning *ToggleMonitorPauseResponse
func (c *ClientWithResponses) ToggleMonitorPauseWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error) {
	rsp, err := c.ToggleMonitorPauseWithBody(ctx, monitorID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleMonitorPauseResponse(rsp)
}

func (c *ClientWithResponses) ToggleMonitorPauseWithResponse(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error) {
	rsp, err := c.ToggleMonitorPause(ctx, monitorID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleMonitorPauseResponse(rsp)
}

// EditMonitorWithBodyWithResponse request with arbitrary body returning *EditMonitorResponse
func (c *ClientWithResponses) EditMonitorWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error) {
	rsp, err := c.EditMonitorWithBody(ctx, monitorID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMonitorResponse(rsp)
}

func (c *ClientWithResponses) EditMonitorWithResponse(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error) {
	rsp, err := c.EditMonitor(ctx, monitorID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMonitorResponse(rsp)
}

// GetMonitorResponseTimeStatsWithResponse request returning *GetMonitorResponseTimeStatsResponse
func (c *ClientWithResponses) GetMonitorResponseTimeStatsWithResponse(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*GetMonitorResponseTimeStatsResponse, error) {
	rsp, err := c.GetMonitorResponseTimeStats(ctx, monitorID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonitorResponseTimeStatsResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// ParseGetAllIncidentsResponse parses an HTTP response from a GetAllIncidentsWithResponse call
func ParseGetAllIncidentsResponse(rsp *http.Response) (*GetAllIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllIncidentsPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetIncidentByIDResponse parses an HTTP response from a GetIncidentByIDWithResponse call
func ParseGetIncidentByIDResponse(rsp *http.Response) (*GetIncidentByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIncidentByByIdPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllMonitorsResponse parses an HTTP response from a GetAllMonitorsWithResponse call
func ParseGetAllMonitorsResponse(rsp *http.Response) (*GetAllMonitorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMonitorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllMonitorsPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMonitorResponse parses an HTTP response from a CreateMonitorWithResponse call
func ParseCreateMonitorResponse(rsp *http.Response) (*CreateMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMonitorResponse parses an HTTP response from a DeleteMonitorWithResponse call
func ParseDeleteMonitorResponse(rsp *http.Response) (*DeleteMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMonitorByIDResponse parses an HTTP response from a GetMonitorByIDWithResponse call
func ParseGetMonitorByIDResponse(rsp *http.Response) (*GetMonitorByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonitorByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllMonitorByIdPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseToggleMonitorPauseResponse parses an HTTP response from a ToggleMonitorPauseWithResponse call
func ParseToggleMonitorPauseResponse(rsp *http.Response) (*ToggleMonitorPauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleMonitorPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditMonitorResponse parses an HTTP response from a EditMonitorWithResponse call
func ParseEditMonitorResponse(rsp *http.Response) (*EditMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMonitorResponseTimeStatsResponse parses an HTTP response from a GetMonitorResponseTimeStatsWithResponse call
func ParseGetMonitorResponseTimeStatsResponse(rsp *http.Response) (*GetMonitorResponseTimeStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonitorResponseTimeStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMonitorResponseTimeStatsPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
