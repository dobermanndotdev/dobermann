// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// BulkInviteMembersByEmail defines model for BulkInviteMembersByEmail.
type BulkInviteMembersByEmail struct {
	Emails *[]string `json:"emails,omitempty"`
}

// ConfirmInvitationRequest defines model for ConfirmInvitationRequest.
type ConfirmInvitationRequest struct {
	Email           string `json:"email"`
	InvitationToken string `json:"invitation_token"`
	Password        string `json:"password"`
}

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	AccountName string `json:"account_name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
}

// CreateMonitorRequest defines model for CreateMonitorRequest.
type CreateMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// EditMonitorRequest defines model for EditMonitorRequest.
type EditMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// FullIncident defines model for FullIncident.
type FullIncident struct {
	Cause          string     `json:"cause"`
	CheckedUrl     string     `json:"checked_url"`
	CreatedAt      time.Time  `json:"created_at"`
	Id             string     `json:"id"`
	MonitorId      string     `json:"monitor_id"`
	ResolvedAt     *time.Time `json:"resolved_at,omitempty"`
	ResponseStatus *int       `json:"response_status,omitempty"`
}

// GetAllIncidentsPayload defines model for GetAllIncidentsPayload.
type GetAllIncidentsPayload struct {
	Data       []Incident `json:"data"`
	Page       int        `json:"page"`
	PageCount  int        `json:"page_count"`
	PerPage    int        `json:"per_page"`
	TotalCount int64      `json:"total_count"`
}

// GetAllMonitorByIdPayload defines model for GetAllMonitorByIdPayload.
type GetAllMonitorByIdPayload struct {
	Data Monitor `json:"data"`
}

// GetAllMonitorsPayload defines model for GetAllMonitorsPayload.
type GetAllMonitorsPayload struct {
	Data       []Monitor `json:"data"`
	Page       int       `json:"page"`
	PageCount  int       `json:"page_count"`
	PerPage    int       `json:"per_page"`
	TotalCount int64     `json:"total_count"`
}

// GetIncidentByByIdPayload defines model for GetIncidentByByIdPayload.
type GetIncidentByByIdPayload struct {
	Data FullIncident `json:"data"`
}

// GetMonitorResponseTimeStatsPayload defines model for GetMonitorResponseTimeStatsPayload.
type GetMonitorResponseTimeStatsPayload struct {
	Data []ResponseTimeStat `json:"data"`
}

// GetProfileDetailsPayload defines model for GetProfileDetailsPayload.
type GetProfileDetailsPayload struct {
	Data User `json:"data"`
}

// Incident defines model for Incident.
type Incident struct {
	Cause      string     `json:"cause"`
	CheckedUrl string     `json:"checked_url"`
	CreatedAt  time.Time  `json:"created_at"`
	Id         string     `json:"id"`
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`
}

// LogInPayload defines model for LogInPayload.
type LogInPayload struct {
	Token string `json:"token"`
}

// LogInRequest defines model for LogInRequest.
type LogInRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Monitor defines model for Monitor.
type Monitor struct {
	CheckIntervalInSeconds int        `json:"check_interval_in_seconds"`
	CreatedAt              time.Time  `json:"created_at"`
	DownSince              *time.Time `json:"down_since,omitempty"`
	EndpointUrl            string     `json:"endpoint_url"`
	Id                     string     `json:"id"`
	Incidents              []Incident `json:"incidents"`
	IsEndpointUp           bool       `json:"is_endpoint_up"`
	IsPaused               bool       `json:"is_paused"`
	LastCheckedAt          *time.Time `json:"last_checked_at,omitempty"`
	UpSince                *time.Time `json:"up_since,omitempty"`
}

// ResponseTimeStat defines model for ResponseTimeStat.
type ResponseTimeStat struct {
	Date   time.Time `json:"date"`
	Region string    `json:"region"`
	Value  int       `json:"value"`
}

// ToggleMonitorPauseRequest defines model for ToggleMonitorPauseRequest.
type ToggleMonitorPauseRequest struct {
	Pause bool `json:"pause"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	Id        string    `json:"id"`
	LastName  string    `json:"last_name"`
	Role      string    `json:"role"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetAllIncidentsParams defines parameters for GetAllIncidents.
type GetAllIncidentsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAllMonitorsParams defines parameters for GetAllMonitors.
type GetAllMonitorsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMonitorResponseTimeStatsParams defines parameters for GetMonitorResponseTimeStats.
type GetMonitorResponseTimeStatsParams struct {
	RangeInDays *int `form:"range_in_days,omitempty" json:"range_in_days,omitempty"`
}

// BulkInviteMembersByEmailJSONRequestBody defines body for BulkInviteMembersByEmail for application/json ContentType.
type BulkInviteMembersByEmailJSONRequestBody = BulkInviteMembersByEmail

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// ConfirmInvitationJSONRequestBody defines body for ConfirmInvitation for application/json ContentType.
type ConfirmInvitationJSONRequestBody = ConfirmInvitationRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LogInRequest

// CreateMonitorJSONRequestBody defines body for CreateMonitor for application/json ContentType.
type CreateMonitorJSONRequestBody = CreateMonitorRequest

// ToggleMonitorPauseJSONRequestBody defines body for ToggleMonitorPause for application/json ContentType.
type ToggleMonitorPauseJSONRequestBody = ToggleMonitorPauseRequest

// EditMonitorJSONRequestBody defines body for EditMonitor for application/json ContentType.
type EditMonitorJSONRequestBody = EditMonitorRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// BulkInviteMembersByEmailWithBody request with any body
	BulkInviteMembersByEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	BulkInviteMembersByEmail(ctx context.Context, body BulkInviteMembersByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetProfileDetails request
	GetProfileDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateAccountWithBody request with any body
	CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmInvitationWithBody request with any body
	ConfirmInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ConfirmInvitation(ctx context.Context, body ConfirmInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// LoginWithBody request with any body
	LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllIncidents request
	GetAllIncidents(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetIncidentByID request
	GetIncidentByID(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetAllMonitors request
	GetAllMonitors(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMonitorWithBody request with any body
	CreateMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMonitor(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// DeleteMonitor request
	DeleteMonitor(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonitorByID request
	GetMonitorByID(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ToggleMonitorPauseWithBody request with any body
	ToggleMonitorPauseWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	ToggleMonitorPause(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// EditMonitorWithBody request with any body
	EditMonitorWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	EditMonitor(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// GetMonitorResponseTimeStats request
	GetMonitorResponseTimeStats(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) BulkInviteMembersByEmailWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkInviteMembersByEmailRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) BulkInviteMembersByEmail(ctx context.Context, body BulkInviteMembersByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewBulkInviteMembersByEmailRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetProfileDetails(ctx context.Context, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetProfileDetailsRequest(c.Server)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAccount(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmInvitationWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmInvitationRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmInvitation(ctx context.Context, body ConfirmInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmInvitationRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) LoginWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) Login(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewLoginRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllIncidents(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllIncidentsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetIncidentByID(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetIncidentByIDRequest(c.Server, incidentID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetAllMonitors(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetAllMonitorsRequest(c.Server, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitor(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) DeleteMonitor(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewDeleteMonitorRequest(c.Server, monitorID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonitorByID(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonitorByIDRequest(c.Server, monitorID)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleMonitorPauseWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleMonitorPauseRequestWithBody(c.Server, monitorID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ToggleMonitorPause(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewToggleMonitorPauseRequest(c.Server, monitorID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMonitorWithBody(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMonitorRequestWithBody(c.Server, monitorID, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) EditMonitor(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewEditMonitorRequest(c.Server, monitorID, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) GetMonitorResponseTimeStats(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewGetMonitorResponseTimeStatsRequest(c.Server, monitorID, params)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewBulkInviteMembersByEmailRequest calls the generic BulkInviteMembersByEmail builder with application/json body
func NewBulkInviteMembersByEmailRequest(server string, body BulkInviteMembersByEmailJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewBulkInviteMembersByEmailRequestWithBody(server, "application/json", bodyReader)
}

// NewBulkInviteMembersByEmailRequestWithBody generates requests for BulkInviteMembersByEmail with any type of body
func NewBulkInviteMembersByEmailRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/members/invite")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetProfileDetailsRequest generates requests for GetProfileDetails
func NewGetProfileDetailsRequest(server string) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/profile")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateAccountRequest calls the generic CreateAccount builder with application/json body
func NewCreateAccountRequest(server string, body CreateAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAccountRequestWithBody generates requests for CreateAccount with any type of body
func NewCreateAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmInvitationRequest calls the generic ConfirmInvitation builder with application/json body
func NewConfirmInvitationRequest(server string, body ConfirmInvitationJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewConfirmInvitationRequestWithBody(server, "application/json", bodyReader)
}

// NewConfirmInvitationRequestWithBody generates requests for ConfirmInvitation with any type of body
func NewConfirmInvitationRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/accounts/confirm-invitation")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewLoginRequest calls the generic Login builder with application/json body
func NewLoginRequest(server string, body LoginJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewLoginRequestWithBody(server, "application/json", bodyReader)
}

// NewLoginRequestWithBody generates requests for Login with any type of body
func NewLoginRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/auth/login")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetAllIncidentsRequest generates requests for GetAllIncidents
func NewGetAllIncidentsRequest(server string, params *GetAllIncidentsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetIncidentByIDRequest generates requests for GetIncidentByID
func NewGetIncidentByIDRequest(server string, incidentID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "incidentID", runtime.ParamLocationPath, incidentID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/incidents/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetAllMonitorsRequest generates requests for GetAllMonitors
func NewGetAllMonitorsRequest(server string, params *GetAllMonitorsParams) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.Page != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "page", runtime.ParamLocationQuery, *params.Page); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		if params.Limit != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "limit", runtime.ParamLocationQuery, *params.Limit); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMonitorRequest calls the generic CreateMonitor builder with application/json body
func NewCreateMonitorRequest(server string, body CreateMonitorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMonitorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMonitorRequestWithBody generates requests for CreateMonitor with any type of body
func NewCreateMonitorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewDeleteMonitorRequest generates requests for DeleteMonitor
func NewDeleteMonitorRequest(server string, monitorID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("DELETE", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewGetMonitorByIDRequest generates requests for GetMonitorByID
func NewGetMonitorByIDRequest(server string, monitorID string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewToggleMonitorPauseRequest calls the generic ToggleMonitorPause builder with application/json body
func NewToggleMonitorPauseRequest(server string, monitorID string, body ToggleMonitorPauseJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewToggleMonitorPauseRequestWithBody(server, monitorID, "application/json", bodyReader)
}

// NewToggleMonitorPauseRequestWithBody generates requests for ToggleMonitorPause with any type of body
func NewToggleMonitorPauseRequestWithBody(server string, monitorID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewEditMonitorRequest calls the generic EditMonitor builder with application/json body
func NewEditMonitorRequest(server string, monitorID string, body EditMonitorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewEditMonitorRequestWithBody(server, monitorID, "application/json", bodyReader)
}

// NewEditMonitorRequestWithBody generates requests for EditMonitor with any type of body
func NewEditMonitorRequestWithBody(server string, monitorID string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("PUT", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewGetMonitorResponseTimeStatsRequest generates requests for GetMonitorResponseTimeStats
func NewGetMonitorResponseTimeStatsRequest(server string, monitorID string, params *GetMonitorResponseTimeStatsParams) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, monitorID)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors/%s/stats/response-times", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	if params != nil {
		queryValues := queryURL.Query()

		if params.RangeInDays != nil {

			if queryFrag, err := runtime.StyleParamWithLocation("form", true, "range_in_days", runtime.ParamLocationQuery, *params.RangeInDays); err != nil {
				return nil, err
			} else if parsed, err := url.ParseQuery(queryFrag); err != nil {
				return nil, err
			} else {
				for k, v := range parsed {
					for _, v2 := range v {
						queryValues.Add(k, v2)
					}
				}
			}

		}

		queryURL.RawQuery = queryValues.Encode()
	}

	req, err := http.NewRequest("GET", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// BulkInviteMembersByEmailWithBodyWithResponse request with any body
	BulkInviteMembersByEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkInviteMembersByEmailResponse, error)

	BulkInviteMembersByEmailWithResponse(ctx context.Context, body BulkInviteMembersByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkInviteMembersByEmailResponse, error)

	// GetProfileDetailsWithResponse request
	GetProfileDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProfileDetailsResponse, error)

	// CreateAccountWithBodyWithResponse request with any body
	CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error)

	// ConfirmInvitationWithBodyWithResponse request with any body
	ConfirmInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmInvitationResponse, error)

	ConfirmInvitationWithResponse(ctx context.Context, body ConfirmInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmInvitationResponse, error)

	// LoginWithBodyWithResponse request with any body
	LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error)

	// GetAllIncidentsWithResponse request
	GetAllIncidentsWithResponse(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*GetAllIncidentsResponse, error)

	// GetIncidentByIDWithResponse request
	GetIncidentByIDWithResponse(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*GetIncidentByIDResponse, error)

	// GetAllMonitorsWithResponse request
	GetAllMonitorsWithResponse(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*GetAllMonitorsResponse, error)

	// CreateMonitorWithBodyWithResponse request with any body
	CreateMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error)

	CreateMonitorWithResponse(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error)

	// DeleteMonitorWithResponse request
	DeleteMonitorWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*DeleteMonitorResponse, error)

	// GetMonitorByIDWithResponse request
	GetMonitorByIDWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*GetMonitorByIDResponse, error)

	// ToggleMonitorPauseWithBodyWithResponse request with any body
	ToggleMonitorPauseWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error)

	ToggleMonitorPauseWithResponse(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error)

	// EditMonitorWithBodyWithResponse request with any body
	EditMonitorWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error)

	EditMonitorWithResponse(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error)

	// GetMonitorResponseTimeStatsWithResponse request
	GetMonitorResponseTimeStatsWithResponse(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*GetMonitorResponseTimeStatsResponse, error)
}

type BulkInviteMembersByEmailResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r BulkInviteMembersByEmailResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r BulkInviteMembersByEmailResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetProfileDetailsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetProfileDetailsPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetProfileDetailsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetProfileDetailsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmInvitationResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ConfirmInvitationResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmInvitationResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type LoginResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *LogInPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r LoginResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r LoginResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllIncidentsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllIncidentsPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllIncidentsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllIncidentsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetIncidentByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetIncidentByByIdPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetIncidentByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetIncidentByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetAllMonitorsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllMonitorsPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetAllMonitorsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetAllMonitorsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r CreateMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type DeleteMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r DeleteMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r DeleteMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonitorByIDResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetAllMonitorByIdPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMonitorByIDResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonitorByIDResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ToggleMonitorPauseResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r ToggleMonitorPauseResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ToggleMonitorPauseResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type EditMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r EditMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r EditMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type GetMonitorResponseTimeStatsResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSON200      *GetMonitorResponseTimeStatsPayload
	JSONDefault  *DefaultError
}

// Status returns HTTPResponse.Status
func (r GetMonitorResponseTimeStatsResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r GetMonitorResponseTimeStatsResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// BulkInviteMembersByEmailWithBodyWithResponse request with arbitrary body returning *BulkInviteMembersByEmailResponse
func (c *ClientWithResponses) BulkInviteMembersByEmailWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*BulkInviteMembersByEmailResponse, error) {
	rsp, err := c.BulkInviteMembersByEmailWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkInviteMembersByEmailResponse(rsp)
}

func (c *ClientWithResponses) BulkInviteMembersByEmailWithResponse(ctx context.Context, body BulkInviteMembersByEmailJSONRequestBody, reqEditors ...RequestEditorFn) (*BulkInviteMembersByEmailResponse, error) {
	rsp, err := c.BulkInviteMembersByEmail(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseBulkInviteMembersByEmailResponse(rsp)
}

// GetProfileDetailsWithResponse request returning *GetProfileDetailsResponse
func (c *ClientWithResponses) GetProfileDetailsWithResponse(ctx context.Context, reqEditors ...RequestEditorFn) (*GetProfileDetailsResponse, error) {
	rsp, err := c.GetProfileDetails(ctx, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetProfileDetailsResponse(rsp)
}

// CreateAccountWithBodyWithResponse request with arbitrary body returning *CreateAccountResponse
func (c *ClientWithResponses) CreateAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAccountWithResponse(ctx context.Context, body CreateAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAccountResponse, error) {
	rsp, err := c.CreateAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAccountResponse(rsp)
}

// ConfirmInvitationWithBodyWithResponse request with arbitrary body returning *ConfirmInvitationResponse
func (c *ClientWithResponses) ConfirmInvitationWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ConfirmInvitationResponse, error) {
	rsp, err := c.ConfirmInvitationWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmInvitationResponse(rsp)
}

func (c *ClientWithResponses) ConfirmInvitationWithResponse(ctx context.Context, body ConfirmInvitationJSONRequestBody, reqEditors ...RequestEditorFn) (*ConfirmInvitationResponse, error) {
	rsp, err := c.ConfirmInvitation(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmInvitationResponse(rsp)
}

// LoginWithBodyWithResponse request with arbitrary body returning *LoginResponse
func (c *ClientWithResponses) LoginWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.LoginWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

func (c *ClientWithResponses) LoginWithResponse(ctx context.Context, body LoginJSONRequestBody, reqEditors ...RequestEditorFn) (*LoginResponse, error) {
	rsp, err := c.Login(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseLoginResponse(rsp)
}

// GetAllIncidentsWithResponse request returning *GetAllIncidentsResponse
func (c *ClientWithResponses) GetAllIncidentsWithResponse(ctx context.Context, params *GetAllIncidentsParams, reqEditors ...RequestEditorFn) (*GetAllIncidentsResponse, error) {
	rsp, err := c.GetAllIncidents(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllIncidentsResponse(rsp)
}

// GetIncidentByIDWithResponse request returning *GetIncidentByIDResponse
func (c *ClientWithResponses) GetIncidentByIDWithResponse(ctx context.Context, incidentID string, reqEditors ...RequestEditorFn) (*GetIncidentByIDResponse, error) {
	rsp, err := c.GetIncidentByID(ctx, incidentID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetIncidentByIDResponse(rsp)
}

// GetAllMonitorsWithResponse request returning *GetAllMonitorsResponse
func (c *ClientWithResponses) GetAllMonitorsWithResponse(ctx context.Context, params *GetAllMonitorsParams, reqEditors ...RequestEditorFn) (*GetAllMonitorsResponse, error) {
	rsp, err := c.GetAllMonitors(ctx, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetAllMonitorsResponse(rsp)
}

// CreateMonitorWithBodyWithResponse request with arbitrary body returning *CreateMonitorResponse
func (c *ClientWithResponses) CreateMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error) {
	rsp, err := c.CreateMonitorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitorResponse(rsp)
}

func (c *ClientWithResponses) CreateMonitorWithResponse(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error) {
	rsp, err := c.CreateMonitor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitorResponse(rsp)
}

// DeleteMonitorWithResponse request returning *DeleteMonitorResponse
func (c *ClientWithResponses) DeleteMonitorWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*DeleteMonitorResponse, error) {
	rsp, err := c.DeleteMonitor(ctx, monitorID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseDeleteMonitorResponse(rsp)
}

// GetMonitorByIDWithResponse request returning *GetMonitorByIDResponse
func (c *ClientWithResponses) GetMonitorByIDWithResponse(ctx context.Context, monitorID string, reqEditors ...RequestEditorFn) (*GetMonitorByIDResponse, error) {
	rsp, err := c.GetMonitorByID(ctx, monitorID, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonitorByIDResponse(rsp)
}

// ToggleMonitorPauseWithBodyWithResponse request with arbitrary body returning *ToggleMonitorPauseResponse
func (c *ClientWithResponses) ToggleMonitorPauseWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error) {
	rsp, err := c.ToggleMonitorPauseWithBody(ctx, monitorID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleMonitorPauseResponse(rsp)
}

func (c *ClientWithResponses) ToggleMonitorPauseWithResponse(ctx context.Context, monitorID string, body ToggleMonitorPauseJSONRequestBody, reqEditors ...RequestEditorFn) (*ToggleMonitorPauseResponse, error) {
	rsp, err := c.ToggleMonitorPause(ctx, monitorID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseToggleMonitorPauseResponse(rsp)
}

// EditMonitorWithBodyWithResponse request with arbitrary body returning *EditMonitorResponse
func (c *ClientWithResponses) EditMonitorWithBodyWithResponse(ctx context.Context, monitorID string, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error) {
	rsp, err := c.EditMonitorWithBody(ctx, monitorID, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMonitorResponse(rsp)
}

func (c *ClientWithResponses) EditMonitorWithResponse(ctx context.Context, monitorID string, body EditMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*EditMonitorResponse, error) {
	rsp, err := c.EditMonitor(ctx, monitorID, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseEditMonitorResponse(rsp)
}

// GetMonitorResponseTimeStatsWithResponse request returning *GetMonitorResponseTimeStatsResponse
func (c *ClientWithResponses) GetMonitorResponseTimeStatsWithResponse(ctx context.Context, monitorID string, params *GetMonitorResponseTimeStatsParams, reqEditors ...RequestEditorFn) (*GetMonitorResponseTimeStatsResponse, error) {
	rsp, err := c.GetMonitorResponseTimeStats(ctx, monitorID, params, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseGetMonitorResponseTimeStatsResponse(rsp)
}

// ParseBulkInviteMembersByEmailResponse parses an HTTP response from a BulkInviteMembersByEmailWithResponse call
func ParseBulkInviteMembersByEmailResponse(rsp *http.Response) (*BulkInviteMembersByEmailResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &BulkInviteMembersByEmailResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetProfileDetailsResponse parses an HTTP response from a GetProfileDetailsWithResponse call
func ParseGetProfileDetailsResponse(rsp *http.Response) (*GetProfileDetailsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetProfileDetailsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetProfileDetailsPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateAccountResponse parses an HTTP response from a CreateAccountWithResponse call
func ParseCreateAccountResponse(rsp *http.Response) (*CreateAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConfirmInvitationResponse parses an HTTP response from a ConfirmInvitationWithResponse call
func ParseConfirmInvitationResponse(rsp *http.Response) (*ConfirmInvitationResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmInvitationResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseLoginResponse parses an HTTP response from a LoginWithResponse call
func ParseLoginResponse(rsp *http.Response) (*LoginResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &LoginResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest LogInPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllIncidentsResponse parses an HTTP response from a GetAllIncidentsWithResponse call
func ParseGetAllIncidentsResponse(rsp *http.Response) (*GetAllIncidentsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllIncidentsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllIncidentsPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetIncidentByIDResponse parses an HTTP response from a GetIncidentByIDWithResponse call
func ParseGetIncidentByIDResponse(rsp *http.Response) (*GetIncidentByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetIncidentByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetIncidentByByIdPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetAllMonitorsResponse parses an HTTP response from a GetAllMonitorsWithResponse call
func ParseGetAllMonitorsResponse(rsp *http.Response) (*GetAllMonitorsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetAllMonitorsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllMonitorsPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMonitorResponse parses an HTTP response from a CreateMonitorWithResponse call
func ParseCreateMonitorResponse(rsp *http.Response) (*CreateMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseDeleteMonitorResponse parses an HTTP response from a DeleteMonitorWithResponse call
func ParseDeleteMonitorResponse(rsp *http.Response) (*DeleteMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &DeleteMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMonitorByIDResponse parses an HTTP response from a GetMonitorByIDWithResponse call
func ParseGetMonitorByIDResponse(rsp *http.Response) (*GetMonitorByIDResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonitorByIDResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetAllMonitorByIdPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseToggleMonitorPauseResponse parses an HTTP response from a ToggleMonitorPauseWithResponse call
func ParseToggleMonitorPauseResponse(rsp *http.Response) (*ToggleMonitorPauseResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ToggleMonitorPauseResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseEditMonitorResponse parses an HTTP response from a EditMonitorWithResponse call
func ParseEditMonitorResponse(rsp *http.Response) (*EditMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &EditMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseGetMonitorResponseTimeStatsResponse parses an HTTP response from a GetMonitorResponseTimeStatsWithResponse call
func ParseGetMonitorResponseTimeStatsResponse(rsp *http.Response) (*GetMonitorResponseTimeStatsResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &GetMonitorResponseTimeStatsResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && rsp.StatusCode == 200:
		var dest GetMonitorResponseTimeStatsPayload
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSON200 = &dest

	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest DefaultError
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/+xa3W4buxF+FYItkJs9XqUJigNd1Y50ArX2iWE76EVgLKjd0Yoxl9yQXDuCoXcvSO7/",
	"n+RYst2idyuROzP8vpnhzEiPOBRJKjhwrfD0EUtQqeAK7IcZrEjG9FxKIc3nUHANXJtHkqaMhkRTwf3v",
	"SnDznQrXkBDz9FcJKzzFf/Er4b5bVb6VdpWrwdvt1sMRqFDS1AjDU3yKYuAgaYjAbEWy2uvlOqx1Zxm7",
	"W/B7quECkiVIdbaZJ4Qys5ZKkYLU1J0DzNf2iWpI7IPepICnWGlJeYy3XvEFkZJsrCYJPzIqIcLTbzgl",
	"mQJ8u/XwJ8FXVCZWrz39FfzIQOkBpb2qaPlyoMUd8N5NKVHqQcioZ7FlXEecl+uuCbGmSyAaTsNQZFwP",
	"mk3cesBJAr2GDZ9rf5MbSkbNvRCcauMvA+aGawjvAso1yHvCAsoDBaHgkV1MKKdJluDph0lJsNkag7Qn",
	"4VEqKNdBJtlumxu7vRHFxvh5RPWzTH9Zaxsh2fXkIv6bcWrfQmGmtEjyUA1FBEhl4RoRhd5ZWo2uTME7",
	"7HUdJgGlSAxd0aeo9hmRpcg00mtwWrqS2mfPdxXib8sXxPI7hNqo/iNjbMFDGhX5jLEvKzz9Np67yje2",
	"XhukxLEd0Kg3NookFihNdNZLcesUNYHdAxjWPoM+rQ6hLsmGCRJ16YuIJo3ct+cJWynRhGcM/b5pVgIb",
	"0gPrIIPht7XQhFWvr4RMiHZb/v4Re7uAsoJrOhrmNKV7DowKvTxGzzaLaCd+Y7Dlcjq29as7EFel0v99",
	"qgq3PNs8m6pG5I/xVeZvF7k3NIFrTQ4VaG2xO2uQummXUqwogxloU9g8C46vCkbctp4iW7eXLYn6Up29",
	"ayAauKc8HNqLPQpI04UiouE3TW1B0C2ZBrOqYPdPktUuniJzO9qzNC1v2GmgOBfxgg9CPVTItdS5baW4",
	"Xyge9y+yequqImc8txr5FRIj8cADRXkI+7+zo+oZ9AxaXIsHufmoCipD0prCpRAMCM/32DYh6l9mROmg",
	"cLCnoJalT8Osz8Fb1WDrOHXb68iNlY2d8Ojks75s9ATiJcRU9LdG94RlsEcF5fZ5TnEp0Rh7I+KYFb3F",
	"pTn5YCSmrTxXUjrYItqM2o2vXwiY4SywolKN9GgDQWF9cPAlKRjs0W0aH6mpr0utOjkrq+UjpnuHMJNU",
	"b65NzDlczoBIkKeZXptPS/vpjwKdf/77Buc9v8XerlZIrbVO3QQBfmqQnLCZCFW3nTD71NT3Y6rX2fIk",
	"FIm/YuIhvPMjsQSZEM79q/np7GJ+kpjj2Vyzz1su06xEMRwhoa5lbwNTQrk4CdeEx4TTf8RmwUjCnanH",
	"rJD5TqElCe+AG0sYDSHvyRxv+GJx8xQL/fPFp/mf1/ZgJrGBTNSX1TXIexrCnof0sKba+AauxFYm3oNU",
	"7giTk8nJe6NFpMBJSvEUfziZnHywd5BeW2L8vPVXfuKGNr4dX7iuU7gANGFj5xmLCE+HxzzOL0HpMxFt",
	"DjaeGlS3bUaClhnU+jp7uL9NJl3n+/IvR7YdpQ1pL8X4jZlbPWZsc1qPlm+321sPqyxJiNzkQCGHJsrB",
	"RcsNKkJSk1iZAM6P5QKyoiN1JaUxMIYeGjpVJ+4//EFIGCxxe8aFL4bvZ9AocubURhKZAonCTErgmm0Q",
	"E3EMEaK8hng+cishz/S6xH3Y7xvjuiM5e+9IcC9Hf9919E9X89Ob+eyZbJRwO9sUIojDAyIlDiWqhqQe",
	"RP3QjWh/q+aiIyC3x7nHAnpobPzmwLb+TDkiSANJRvBmIqYjyJ7b5eOg2eid9s/Lh9M9ko6uF5//nM/Q",
	"18tDUXMu4lY6qYhodDlDabs+JLRXsSQJaHMFmIxnOMQ/MpAb7BU1Rj6bqQApB+nv+0Y8/UIYTahuSiE/",
	"cymTiTcu8/a4l0vf3PS1rxbCGKr3XgXdFXctzv3H4nEx2445QDU8W8wGHMDUZxV1lVzcDq06n+1G4cik",
	"9c8AX502XrJmqi3bHg1Rl4/0d0VrMSX+f7AWwdqem7+FWC3IdJflA9VrlJKY8qKMKOvtgs3brTda6hWj",
	"uWOWeq3fJF+3+tgXcWd6XggmJUo9ANeDzH/Mn/LsGAED12c2wZ/Z7yvwd6fHUu4zs+PHLrCz+fn85YB1",
	"Rx+H1BvMVNVvZ7MXhe1IyeVNXSqHzS/dceexCTt8/hoe2e6VxD6+4mDGWouERBm3U2I7N9gRdGnWw2Pt",
	"XyX/fQT2/CXmzY/UjM2IFFx16rs9bh5faVIzxo76R+u/oV+dj0j4QE0oCY8hoDyIyEbhHgEvVgHu+iX+",
	"tdO1iWfLc20uWMhGxY87PT5j9cj7gtBqqD/1fSZCwtZC6envk98neHu7/U8AAAD//y+A9+KrKQAA",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
