// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	Data *struct {
		// Birthday User's birthday (empty string if not set)
		Birthday *string `json:"birthday,omitempty"`

		// CreatedAt Timestamp (epoch milliseconds) representing user creation time
		CreatedAt      *int `json:"created_at,omitempty"`
		EmailAddresses *[]struct {
			// EmailAddress User's email address
			EmailAddress *string `json:"email_address,omitempty"`

			// Id Unique identifier for the email address
			Id *string `json:"id,omitempty"`

			// LinkedTo (Array is empty for this event)
			LinkedTo *[]map[string]interface{} `json:"linked_to,omitempty"`

			// Object Object type (always "email_address" for this event)
			Object       *string `json:"object,omitempty"`
			Verification *struct {
				// Status Verification status (e.g., "verified", "unverified")
				Status *string `json:"status,omitempty"`

				// Strategy Verification strategy (e.g., "ticket", "link")
				Strategy *string `json:"strategy,omitempty"`
			} `json:"verification,omitempty"`
		} `json:"email_addresses,omitempty"`

		// ExternalAccounts (Array is empty for this event)
		ExternalAccounts *[]map[string]interface{} `json:"external_accounts,omitempty"`

		// ExternalId User's external identifier
		ExternalId *string `json:"external_id"`

		// FirstName User's first name
		FirstName *string `json:"first_name"`

		// Gender User's gender (empty string if not set)
		Gender *string `json:"gender,omitempty"`

		// Id Unique identifier for the user
		Id string `json:"id"`

		// ImageUrl User's image URL (may be redacted)
		ImageUrl *string `json:"image_url,omitempty"`

		// LastName User's last name
		LastName *string `json:"last_name"`

		// LastSignInAt Timestamp (epoch milliseconds) representing last sign-in time
		LastSignInAt *int `json:"last_sign_in_at"`

		// Object Object type (always "user" for this event)
		Object *string `json:"object,omitempty"`

		// PasswordEnabled Whether the user has password authentication enabled
		PasswordEnabled bool `json:"password_enabled"`

		// PhoneNumbers (Array is empty for this event)
		PhoneNumbers *[]map[string]interface{} `json:"phone_numbers,omitempty"`

		// PrimaryEmailAddressId Unique identifier for the primary email address
		PrimaryEmailAddressId *string `json:"primary_email_address_id"`

		// PrimaryPhoneNumberId Unique identifier for the primary phone number (null if not set)
		PrimaryPhoneNumberId *string `json:"primary_phone_number_id"`

		// PrimaryWeb3WalletId Unique identifier for the primary web3 wallet (null if not set)
		PrimaryWeb3WalletId *string `json:"primary_web3_wallet_id"`

		// PrivateMetadata User's private metadata (empty object for this event)
		PrivateMetadata *map[string]interface{} `json:"private_metadata,omitempty"`

		// ProfileImageUrl User's profile image URL (may be redacted)
		ProfileImageUrl *string `json:"profile_image_url,omitempty"`

		// PublicMetadata User's public metadata (empty object for this event)
		PublicMetadata *map[string]interface{} `json:"public_metadata,omitempty"`

		// TwoFactorEnabled Whether two-factor authentication is enabled
		TwoFactorEnabled bool `json:"two_factor_enabled"`

		// UnsafeMetadata User's unsafe metadata (empty object for this event)
		UnsafeMetadata *map[string]interface{} `json:"unsafe_metadata,omitempty"`

		// UpdatedAt Timestamp (epoch milliseconds) representing user update time
		UpdatedAt *int `json:"updated_at,omitempty"`

		// Username Username (null if not set)
		Username *string `json:"username"`

		// Web3Wallets (Array is empty for this event)
		Web3Wallets *[]map[string]interface{} `json:"web3_wallets,omitempty"`
	} `json:"data,omitempty"`

	// Object Event type (always "user.created" for this event)
	Object *string `json:"object,omitempty"`

	// Type Event type (always "user.created" for this event)
	Type *string `json:"type,omitempty"`
}

// CreateMonitorRequest defines model for CreateMonitorRequest.
type CreateMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// EditMonitorRequest defines model for EditMonitorRequest.
type EditMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// FullIncident defines model for FullIncident.
type FullIncident struct {
	Cause          string     `json:"cause"`
	CheckedUrl     string     `json:"checked_url"`
	CreatedAt      time.Time  `json:"created_at"`
	Id             string     `json:"id"`
	MonitorId      string     `json:"monitor_id"`
	ResolvedAt     *time.Time `json:"resolved_at,omitempty"`
	ResponseStatus *int       `json:"response_status,omitempty"`
}

// GetAllIncidentsPayload defines model for GetAllIncidentsPayload.
type GetAllIncidentsPayload struct {
	Data       []Incident `json:"data"`
	Page       int        `json:"page"`
	PageCount  int        `json:"page_count"`
	PerPage    int        `json:"per_page"`
	TotalCount int64      `json:"total_count"`
}

// GetAllMonitorByIdPayload defines model for GetAllMonitorByIdPayload.
type GetAllMonitorByIdPayload struct {
	Data Monitor `json:"data"`
}

// GetAllMonitorsPayload defines model for GetAllMonitorsPayload.
type GetAllMonitorsPayload struct {
	Data       []Monitor `json:"data"`
	Page       int       `json:"page"`
	PageCount  int       `json:"page_count"`
	PerPage    int       `json:"per_page"`
	TotalCount int64     `json:"total_count"`
}

// GetIncidentByByIdPayload defines model for GetIncidentByByIdPayload.
type GetIncidentByByIdPayload struct {
	Data FullIncident `json:"data"`
}

// GetMonitorResponseTimeStatsPayload defines model for GetMonitorResponseTimeStatsPayload.
type GetMonitorResponseTimeStatsPayload struct {
	Data []ResponseTimeStat `json:"data"`
}

// Incident defines model for Incident.
type Incident struct {
	Cause      string     `json:"cause"`
	CheckedUrl string     `json:"checked_url"`
	CreatedAt  time.Time  `json:"created_at"`
	Id         string     `json:"id"`
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`
}

// Monitor defines model for Monitor.
type Monitor struct {
	CheckIntervalInSeconds int        `json:"check_interval_in_seconds"`
	CreatedAt              time.Time  `json:"created_at"`
	DownSince              *time.Time `json:"down_since,omitempty"`
	EndpointUrl            string     `json:"endpoint_url"`
	Id                     string     `json:"id"`
	Incidents              []Incident `json:"incidents"`
	IsEndpointUp           bool       `json:"is_endpoint_up"`
	IsPaused               bool       `json:"is_paused"`
	LastCheckedAt          *time.Time `json:"last_checked_at,omitempty"`
	UpSince                *time.Time `json:"up_since,omitempty"`
}

// ResponseTimeStat defines model for ResponseTimeStat.
type ResponseTimeStat struct {
	Date   time.Time `json:"date"`
	Region string    `json:"region"`
	Value  int       `json:"value"`
}

// ToggleMonitorPauseRequest defines model for ToggleMonitorPauseRequest.
type ToggleMonitorPauseRequest struct {
	Pause bool `json:"pause"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetAllIncidentsParams defines parameters for GetAllIncidents.
type GetAllIncidentsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetAllMonitorsParams defines parameters for GetAllMonitors.
type GetAllMonitorsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMonitorResponseTimeStatsParams defines parameters for GetMonitorResponseTimeStats.
type GetMonitorResponseTimeStatsParams struct {
	RangeInDays *int `form:"range_in_days,omitempty" json:"range_in_days,omitempty"`
}

// CreateMonitorJSONRequestBody defines body for CreateMonitor for application/json ContentType.
type CreateMonitorJSONRequestBody = CreateMonitorRequest

// ToggleMonitorPauseJSONRequestBody defines body for ToggleMonitorPause for application/json ContentType.
type ToggleMonitorPauseJSONRequestBody = ToggleMonitorPauseRequest

// EditMonitorJSONRequestBody defines body for EditMonitor for application/json ContentType.
type EditMonitorJSONRequestBody = EditMonitorRequest

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get all incidents
	// (GET /incidents)
	GetAllIncidents(ctx echo.Context, params GetAllIncidentsParams) error
	// Get an incident by id
	// (GET /incidents/{incidentID})
	GetIncidentByID(ctx echo.Context, incidentID string) error
	// Get all monitors in a with pagination
	// (GET /monitors)
	GetAllMonitors(ctx echo.Context, params GetAllMonitorsParams) error
	// Create a new monitor
	// (POST /monitors)
	CreateMonitor(ctx echo.Context) error
	// Delete monitor
	// (DELETE /monitors/{monitorID})
	DeleteMonitor(ctx echo.Context, monitorID string) error
	// Get all monitors in a with pagination
	// (GET /monitors/{monitorID})
	GetMonitorByID(ctx echo.Context, monitorID string) error
	// Pause or unpause the monitor
	// (POST /monitors/{monitorID})
	ToggleMonitorPause(ctx echo.Context, monitorID string) error
	// Edit a monitor by id
	// (PUT /monitors/{monitorID})
	EditMonitor(ctx echo.Context, monitorID string) error
	// Get the stats about the response time
	// (GET /monitors/{monitorID}/stats/response-times)
	GetMonitorResponseTimeStats(ctx echo.Context, monitorID string, params GetMonitorResponseTimeStatsParams) error
	// Creates a new account
	// (POST /webhooks/create-account)
	CreateAccount(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetAllIncidents converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllIncidents(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllIncidentsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllIncidents(ctx, params)
	return err
}

// GetIncidentByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentID" -------------
	var incidentID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentID", runtime.ParamLocationPath, ctx.Param("incidentID"), &incidentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncidentByID(ctx, incidentID)
	return err
}

// GetAllMonitors converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllMonitors(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllMonitorsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllMonitors(ctx, params)
	return err
}

// CreateMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMonitor(ctx)
	return err
}

// DeleteMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMonitor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMonitor(ctx, monitorID)
	return err
}

// GetMonitorByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitorByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonitorByID(ctx, monitorID)
	return err
}

// ToggleMonitorPause converts echo context to params.
func (w *ServerInterfaceWrapper) ToggleMonitorPause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ToggleMonitorPause(ctx, monitorID)
	return err
}

// EditMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) EditMonitor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditMonitor(ctx, monitorID)
	return err
}

// GetMonitorResponseTimeStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitorResponseTimeStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonitorResponseTimeStatsParams
	// ------------- Optional query parameter "range_in_days" -------------

	err = runtime.BindQueryParameter("form", true, false, "range_in_days", ctx.QueryParams(), &params.RangeInDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range_in_days: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonitorResponseTimeStats(ctx, monitorID, params)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/incidents", wrapper.GetAllIncidents)
	router.GET(baseURL+"/incidents/:incidentID", wrapper.GetIncidentByID)
	router.GET(baseURL+"/monitors", wrapper.GetAllMonitors)
	router.POST(baseURL+"/monitors", wrapper.CreateMonitor)
	router.DELETE(baseURL+"/monitors/:monitorID", wrapper.DeleteMonitor)
	router.GET(baseURL+"/monitors/:monitorID", wrapper.GetMonitorByID)
	router.POST(baseURL+"/monitors/:monitorID", wrapper.ToggleMonitorPause)
	router.PUT(baseURL+"/monitors/:monitorID", wrapper.EditMonitor)
	router.GET(baseURL+"/monitors/:monitorID/stats/response-times", wrapper.GetMonitorResponseTimeStats)
	router.POST(baseURL+"/webhooks/create-account", wrapper.CreateAccount)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
