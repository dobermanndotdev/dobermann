// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen/v2 version v2.0.0 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
	"github.com/oapi-codegen/runtime"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	AccountName string `json:"account_name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
}

// CreateMonitorRequest defines model for CreateMonitorRequest.
type CreateMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// EditMonitorRequest defines model for EditMonitorRequest.
type EditMonitorRequest struct {
	CheckIntervalInSeconds int    `json:"check_interval_in_seconds"`
	EndpointUrl            string `json:"endpoint_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// FullIncident defines model for FullIncident.
type FullIncident struct {
	Cause           string     `json:"cause"`
	CheckedUrl      string     `json:"checked_url"`
	CreatedAt       time.Time  `json:"created_at"`
	Id              string     `json:"id"`
	MonitorId       string     `json:"monitor_id"`
	RequestHeaders  string     `json:"request_headers"`
	ResolvedAt      *time.Time `json:"resolved_at,omitempty"`
	ResponseBody    string     `json:"response_body"`
	ResponseHeaders string     `json:"response_headers"`
	ResponseStatus  int        `json:"response_status"`
}

// GetAllMonitorByIdPayload defines model for GetAllMonitorByIdPayload.
type GetAllMonitorByIdPayload struct {
	Data Monitor `json:"data"`
}

// GetAllMonitorsPayload defines model for GetAllMonitorsPayload.
type GetAllMonitorsPayload struct {
	Data       []Monitor `json:"data"`
	Page       int       `json:"page"`
	PageCount  int       `json:"page_count"`
	PerPage    int       `json:"per_page"`
	TotalCount int64     `json:"total_count"`
}

// GetIncidentByByIdPayload defines model for GetIncidentByByIdPayload.
type GetIncidentByByIdPayload struct {
	Data FullIncident `json:"data"`
}

// GetMonitorResponseTimeStatsPayload defines model for GetMonitorResponseTimeStatsPayload.
type GetMonitorResponseTimeStatsPayload struct {
	Data []ResponseTimeStat `json:"data"`
}

// GetProfileDetailsPayload defines model for GetProfileDetailsPayload.
type GetProfileDetailsPayload struct {
	Data User `json:"data"`
}

// Incident defines model for Incident.
type Incident struct {
	Cause      string     `json:"cause"`
	CheckedUrl string     `json:"checked_url"`
	CreatedAt  time.Time  `json:"created_at"`
	Id         string     `json:"id"`
	ResolvedAt *time.Time `json:"resolved_at,omitempty"`
}

// LogInPayload defines model for LogInPayload.
type LogInPayload struct {
	Token string `json:"token"`
}

// LogInRequest defines model for LogInRequest.
type LogInRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Monitor defines model for Monitor.
type Monitor struct {
	CheckIntervalInSeconds int        `json:"check_interval_in_seconds"`
	CreatedAt              time.Time  `json:"created_at"`
	EndpointUrl            string     `json:"endpoint_url"`
	Id                     string     `json:"id"`
	Incidents              []Incident `json:"incidents"`
	IsEndpointUp           bool       `json:"is_endpoint_up"`
	IsPaused               bool       `json:"is_paused"`
	LastCheckedAt          *time.Time `json:"last_checked_at,omitempty"`
}

// ResponseTimeStat defines model for ResponseTimeStat.
type ResponseTimeStat struct {
	Date   time.Time `json:"date"`
	Region string    `json:"region"`
	Value  int       `json:"value"`
}

// ToggleMonitorPauseRequest defines model for ToggleMonitorPauseRequest.
type ToggleMonitorPauseRequest struct {
	Pause bool `json:"pause"`
}

// User defines model for User.
type User struct {
	CreatedAt time.Time `json:"created_at"`
	Email     string    `json:"email"`
	FirstName string    `json:"first_name"`
	Id        string    `json:"id"`
	LastName  string    `json:"last_name"`
	Role      string    `json:"role"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetAllMonitorsParams defines parameters for GetAllMonitors.
type GetAllMonitorsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// GetMonitorResponseTimeStatsParams defines parameters for GetMonitorResponseTimeStats.
type GetMonitorResponseTimeStatsParams struct {
	RangeInDays *int `form:"range_in_days,omitempty" json:"range_in_days,omitempty"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LogInRequest

// CreateMonitorJSONRequestBody defines body for CreateMonitor for application/json ContentType.
type CreateMonitorJSONRequestBody = CreateMonitorRequest

// ToggleMonitorPauseJSONRequestBody defines body for ToggleMonitorPause for application/json ContentType.
type ToggleMonitorPauseJSONRequestBody = ToggleMonitorPauseRequest

// EditMonitorJSONRequestBody defines body for EditMonitor for application/json ContentType.
type EditMonitorJSONRequestBody = EditMonitorRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Get details about the user currently logged in
	// (GET /accounts/profile)
	GetProfileDetails(ctx echo.Context) error
	// Creates a new account
	// (POST /auth/accounts)
	CreateAccount(ctx echo.Context) error
	// Log in
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// Get an incident by id
	// (GET /incidents/{incidentID})
	GetIncidentByID(ctx echo.Context, incidentID string) error
	// Get all monitors in a with pagination
	// (GET /monitors)
	GetAllMonitors(ctx echo.Context, params GetAllMonitorsParams) error
	// Create a new monitor
	// (POST /monitors)
	CreateMonitor(ctx echo.Context) error
	// Delete monitor
	// (DELETE /monitors/{monitorID})
	DeleteMonitor(ctx echo.Context, monitorID string) error
	// Get all monitors in a with pagination
	// (GET /monitors/{monitorID})
	GetMonitorByID(ctx echo.Context, monitorID string) error
	// Pause or unpause the monitor
	// (POST /monitors/{monitorID})
	ToggleMonitorPause(ctx echo.Context, monitorID string) error
	// Edit a monitor by id
	// (PUT /monitors/{monitorID})
	EditMonitor(ctx echo.Context, monitorID string) error
	// Get the stats about the response time
	// (GET /monitors/{monitorID}/stats/response-times)
	GetMonitorResponseTimeStats(ctx echo.Context, monitorID string, params GetMonitorResponseTimeStatsParams) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// GetProfileDetails converts echo context to params.
func (w *ServerInterfaceWrapper) GetProfileDetails(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetProfileDetails(ctx)
	return err
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetIncidentByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetIncidentByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "incidentID" -------------
	var incidentID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "incidentID", runtime.ParamLocationPath, ctx.Param("incidentID"), &incidentID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter incidentID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetIncidentByID(ctx, incidentID)
	return err
}

// GetAllMonitors converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllMonitors(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllMonitorsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetAllMonitors(ctx, params)
	return err
}

// CreateMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.CreateMonitor(ctx)
	return err
}

// DeleteMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) DeleteMonitor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.DeleteMonitor(ctx, monitorID)
	return err
}

// GetMonitorByID converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitorByID(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonitorByID(ctx, monitorID)
	return err
}

// ToggleMonitorPause converts echo context to params.
func (w *ServerInterfaceWrapper) ToggleMonitorPause(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.ToggleMonitorPause(ctx, monitorID)
	return err
}

// EditMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) EditMonitor(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.EditMonitor(ctx, monitorID)
	return err
}

// GetMonitorResponseTimeStats converts echo context to params.
func (w *ServerInterfaceWrapper) GetMonitorResponseTimeStats(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "monitorID" -------------
	var monitorID string

	err = runtime.BindStyledParameterWithLocation("simple", false, "monitorID", runtime.ParamLocationPath, ctx.Param("monitorID"), &monitorID)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter monitorID: %s", err))
	}

	ctx.Set(BearerAuthScopes, []string{})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetMonitorResponseTimeStatsParams
	// ------------- Optional query parameter "range_in_days" -------------

	err = runtime.BindQueryParameter("form", true, false, "range_in_days", ctx.QueryParams(), &params.RangeInDays)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter range_in_days: %s", err))
	}

	// Invoke the callback with all the unmarshaled arguments
	err = w.Handler.GetMonitorResponseTimeStats(ctx, monitorID, params)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.GET(baseURL+"/accounts/profile", wrapper.GetProfileDetails)
	router.POST(baseURL+"/auth/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.GET(baseURL+"/incidents/:incidentID", wrapper.GetIncidentByID)
	router.GET(baseURL+"/monitors", wrapper.GetAllMonitors)
	router.POST(baseURL+"/monitors", wrapper.CreateMonitor)
	router.DELETE(baseURL+"/monitors/:monitorID", wrapper.DeleteMonitor)
	router.GET(baseURL+"/monitors/:monitorID", wrapper.GetMonitorByID)
	router.POST(baseURL+"/monitors/:monitorID", wrapper.ToggleMonitorPause)
	router.PUT(baseURL+"/monitors/:monitorID", wrapper.EditMonitor)
	router.GET(baseURL+"/monitors/:monitorID/stats/response-times", wrapper.GetMonitorResponseTimeStats)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"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",
	"bC2Unr6bvJvg7e327wAAAP//qff41ZYiAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %w", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %w", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	res := make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	resolvePath := PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		pathToFile := url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
