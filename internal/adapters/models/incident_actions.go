// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/null/v8"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// IncidentAction is an object representing the database table.
type IncidentAction struct {
	ID                string      `boil:"id" json:"id" toml:"id" yaml:"id"`
	Description       null.String `boil:"description" json:"description,omitempty" toml:"description" yaml:"description,omitempty"`
	ActionType        string      `boil:"action_type" json:"action_type" toml:"action_type" yaml:"action_type"`
	IncidentID        string      `boil:"incident_id" json:"incident_id" toml:"incident_id" yaml:"incident_id"`
	TakenByUserWithID null.String `boil:"taken_by_user_with_id" json:"taken_by_user_with_id,omitempty" toml:"taken_by_user_with_id" yaml:"taken_by_user_with_id,omitempty"`
	At                time.Time   `boil:"at" json:"at" toml:"at" yaml:"at"`

	R *incidentActionR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L incidentActionL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var IncidentActionColumns = struct {
	ID                string
	Description       string
	ActionType        string
	IncidentID        string
	TakenByUserWithID string
	At                string
}{
	ID:                "id",
	Description:       "description",
	ActionType:        "action_type",
	IncidentID:        "incident_id",
	TakenByUserWithID: "taken_by_user_with_id",
	At:                "at",
}

var IncidentActionTableColumns = struct {
	ID                string
	Description       string
	ActionType        string
	IncidentID        string
	TakenByUserWithID string
	At                string
}{
	ID:                "incident_actions.id",
	Description:       "incident_actions.description",
	ActionType:        "incident_actions.action_type",
	IncidentID:        "incident_actions.incident_id",
	TakenByUserWithID: "incident_actions.taken_by_user_with_id",
	At:                "incident_actions.at",
}

// Generated where

type whereHelpernull_String struct{ field string }

func (w whereHelpernull_String) EQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, false, x)
}
func (w whereHelpernull_String) NEQ(x null.String) qm.QueryMod {
	return qmhelper.WhereNullEQ(w.field, true, x)
}
func (w whereHelpernull_String) LT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LT, x)
}
func (w whereHelpernull_String) LTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.LTE, x)
}
func (w whereHelpernull_String) GT(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GT, x)
}
func (w whereHelpernull_String) GTE(x null.String) qm.QueryMod {
	return qmhelper.Where(w.field, qmhelper.GTE, x)
}
func (w whereHelpernull_String) LIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" LIKE ?", x)
}
func (w whereHelpernull_String) NLIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT LIKE ?", x)
}
func (w whereHelpernull_String) ILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" ILIKE ?", x)
}
func (w whereHelpernull_String) NILIKE(x null.String) qm.QueryMod {
	return qm.Where(w.field+" NOT ILIKE ?", x)
}
func (w whereHelpernull_String) IN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelpernull_String) NIN(slice []string) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

func (w whereHelpernull_String) IsNull() qm.QueryMod    { return qmhelper.WhereIsNull(w.field) }
func (w whereHelpernull_String) IsNotNull() qm.QueryMod { return qmhelper.WhereIsNotNull(w.field) }

var IncidentActionWhere = struct {
	ID                whereHelperstring
	Description       whereHelpernull_String
	ActionType        whereHelperstring
	IncidentID        whereHelperstring
	TakenByUserWithID whereHelpernull_String
	At                whereHelpertime_Time
}{
	ID:                whereHelperstring{field: "\"incident_actions\".\"id\""},
	Description:       whereHelpernull_String{field: "\"incident_actions\".\"description\""},
	ActionType:        whereHelperstring{field: "\"incident_actions\".\"action_type\""},
	IncidentID:        whereHelperstring{field: "\"incident_actions\".\"incident_id\""},
	TakenByUserWithID: whereHelpernull_String{field: "\"incident_actions\".\"taken_by_user_with_id\""},
	At:                whereHelpertime_Time{field: "\"incident_actions\".\"at\""},
}

// IncidentActionRels is where relationship names are stored.
var IncidentActionRels = struct {
	Incident        string
	TakenByUserWith string
}{
	Incident:        "Incident",
	TakenByUserWith: "TakenByUserWith",
}

// incidentActionR is where relationships are stored.
type incidentActionR struct {
	Incident        *Incident `boil:"Incident" json:"Incident" toml:"Incident" yaml:"Incident"`
	TakenByUserWith *User     `boil:"TakenByUserWith" json:"TakenByUserWith" toml:"TakenByUserWith" yaml:"TakenByUserWith"`
}

// NewStruct creates a new relationship struct
func (*incidentActionR) NewStruct() *incidentActionR {
	return &incidentActionR{}
}

func (r *incidentActionR) GetIncident() *Incident {
	if r == nil {
		return nil
	}
	return r.Incident
}

func (r *incidentActionR) GetTakenByUserWith() *User {
	if r == nil {
		return nil
	}
	return r.TakenByUserWith
}

// incidentActionL is where Load methods for each relationship are stored.
type incidentActionL struct{}

var (
	incidentActionAllColumns            = []string{"id", "description", "action_type", "incident_id", "taken_by_user_with_id", "at"}
	incidentActionColumnsWithoutDefault = []string{"id", "incident_id"}
	incidentActionColumnsWithDefault    = []string{"description", "action_type", "taken_by_user_with_id", "at"}
	incidentActionPrimaryKeyColumns     = []string{"id"}
	incidentActionGeneratedColumns      = []string{}
)

type (
	// IncidentActionSlice is an alias for a slice of pointers to IncidentAction.
	// This should almost always be used instead of []IncidentAction.
	IncidentActionSlice []*IncidentAction
	// IncidentActionHook is the signature for custom IncidentAction hook methods
	IncidentActionHook func(context.Context, boil.ContextExecutor, *IncidentAction) error

	incidentActionQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	incidentActionType                 = reflect.TypeOf(&IncidentAction{})
	incidentActionMapping              = queries.MakeStructMapping(incidentActionType)
	incidentActionPrimaryKeyMapping, _ = queries.BindMapping(incidentActionType, incidentActionMapping, incidentActionPrimaryKeyColumns)
	incidentActionInsertCacheMut       sync.RWMutex
	incidentActionInsertCache          = make(map[string]insertCache)
	incidentActionUpdateCacheMut       sync.RWMutex
	incidentActionUpdateCache          = make(map[string]updateCache)
	incidentActionUpsertCacheMut       sync.RWMutex
	incidentActionUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var incidentActionAfterSelectHooks []IncidentActionHook

var incidentActionBeforeInsertHooks []IncidentActionHook
var incidentActionAfterInsertHooks []IncidentActionHook

var incidentActionBeforeUpdateHooks []IncidentActionHook
var incidentActionAfterUpdateHooks []IncidentActionHook

var incidentActionBeforeDeleteHooks []IncidentActionHook
var incidentActionAfterDeleteHooks []IncidentActionHook

var incidentActionBeforeUpsertHooks []IncidentActionHook
var incidentActionAfterUpsertHooks []IncidentActionHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *IncidentAction) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *IncidentAction) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *IncidentAction) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *IncidentAction) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *IncidentAction) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *IncidentAction) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *IncidentAction) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *IncidentAction) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *IncidentAction) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range incidentActionAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddIncidentActionHook registers your hook function for all future operations.
func AddIncidentActionHook(hookPoint boil.HookPoint, incidentActionHook IncidentActionHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		incidentActionAfterSelectHooks = append(incidentActionAfterSelectHooks, incidentActionHook)
	case boil.BeforeInsertHook:
		incidentActionBeforeInsertHooks = append(incidentActionBeforeInsertHooks, incidentActionHook)
	case boil.AfterInsertHook:
		incidentActionAfterInsertHooks = append(incidentActionAfterInsertHooks, incidentActionHook)
	case boil.BeforeUpdateHook:
		incidentActionBeforeUpdateHooks = append(incidentActionBeforeUpdateHooks, incidentActionHook)
	case boil.AfterUpdateHook:
		incidentActionAfterUpdateHooks = append(incidentActionAfterUpdateHooks, incidentActionHook)
	case boil.BeforeDeleteHook:
		incidentActionBeforeDeleteHooks = append(incidentActionBeforeDeleteHooks, incidentActionHook)
	case boil.AfterDeleteHook:
		incidentActionAfterDeleteHooks = append(incidentActionAfterDeleteHooks, incidentActionHook)
	case boil.BeforeUpsertHook:
		incidentActionBeforeUpsertHooks = append(incidentActionBeforeUpsertHooks, incidentActionHook)
	case boil.AfterUpsertHook:
		incidentActionAfterUpsertHooks = append(incidentActionAfterUpsertHooks, incidentActionHook)
	}
}

// One returns a single incidentAction record from the query.
func (q incidentActionQuery) One(ctx context.Context, exec boil.ContextExecutor) (*IncidentAction, error) {
	o := &IncidentAction{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for incident_actions")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all IncidentAction records from the query.
func (q incidentActionQuery) All(ctx context.Context, exec boil.ContextExecutor) (IncidentActionSlice, error) {
	var o []*IncidentAction

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to IncidentAction slice")
	}

	if len(incidentActionAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all IncidentAction records in the query.
func (q incidentActionQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count incident_actions rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q incidentActionQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if incident_actions exists")
	}

	return count > 0, nil
}

// Incident pointed to by the foreign key.
func (o *IncidentAction) Incident(mods ...qm.QueryMod) incidentQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.IncidentID),
	}

	queryMods = append(queryMods, mods...)

	return Incidents(queryMods...)
}

// TakenByUserWith pointed to by the foreign key.
func (o *IncidentAction) TakenByUserWith(mods ...qm.QueryMod) userQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.TakenByUserWithID),
	}

	queryMods = append(queryMods, mods...)

	return Users(queryMods...)
}

// LoadIncident allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incidentActionL) LoadIncident(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentAction interface{}, mods queries.Applicator) error {
	var slice []*IncidentAction
	var object *IncidentAction

	if singular {
		var ok bool
		object, ok = maybeIncidentAction.(*IncidentAction)
		if !ok {
			object = new(IncidentAction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIncidentAction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIncidentAction))
			}
		}
	} else {
		s, ok := maybeIncidentAction.(*[]*IncidentAction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIncidentAction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIncidentAction))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentActionR{}
		}
		args = append(args, object.IncidentID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentActionR{}
			}

			for _, a := range args {
				if a == obj.IncidentID {
					continue Outer
				}
			}

			args = append(args, obj.IncidentID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`incidents`),
		qm.WhereIn(`incidents.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Incident")
	}

	var resultSlice []*Incident
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Incident")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for incidents")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for incidents")
	}

	if len(incidentAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Incident = foreign
		if foreign.R == nil {
			foreign.R = &incidentR{}
		}
		foreign.R.IncidentActions = append(foreign.R.IncidentActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.IncidentID == foreign.ID {
				local.R.Incident = foreign
				if foreign.R == nil {
					foreign.R = &incidentR{}
				}
				foreign.R.IncidentActions = append(foreign.R.IncidentActions, local)
				break
			}
		}
	}

	return nil
}

// LoadTakenByUserWith allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (incidentActionL) LoadTakenByUserWith(ctx context.Context, e boil.ContextExecutor, singular bool, maybeIncidentAction interface{}, mods queries.Applicator) error {
	var slice []*IncidentAction
	var object *IncidentAction

	if singular {
		var ok bool
		object, ok = maybeIncidentAction.(*IncidentAction)
		if !ok {
			object = new(IncidentAction)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeIncidentAction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeIncidentAction))
			}
		}
	} else {
		s, ok := maybeIncidentAction.(*[]*IncidentAction)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeIncidentAction)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeIncidentAction))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &incidentActionR{}
		}
		if !queries.IsNil(object.TakenByUserWithID) {
			args = append(args, object.TakenByUserWithID)
		}

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &incidentActionR{}
			}

			for _, a := range args {
				if queries.Equal(a, obj.TakenByUserWithID) {
					continue Outer
				}
			}

			if !queries.IsNil(obj.TakenByUserWithID) {
				args = append(args, obj.TakenByUserWithID)
			}

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`users`),
		qm.WhereIn(`users.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load User")
	}

	var resultSlice []*User
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice User")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for users")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for users")
	}

	if len(userAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.TakenByUserWith = foreign
		if foreign.R == nil {
			foreign.R = &userR{}
		}
		foreign.R.TakenByUserWithIncidentActions = append(foreign.R.TakenByUserWithIncidentActions, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if queries.Equal(local.TakenByUserWithID, foreign.ID) {
				local.R.TakenByUserWith = foreign
				if foreign.R == nil {
					foreign.R = &userR{}
				}
				foreign.R.TakenByUserWithIncidentActions = append(foreign.R.TakenByUserWithIncidentActions, local)
				break
			}
		}
	}

	return nil
}

// SetIncident of the incidentAction to the related item.
// Sets o.R.Incident to related.
// Adds o to related.R.IncidentActions.
func (o *IncidentAction) SetIncident(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Incident) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"incident_actions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"incident_id"}),
		strmangle.WhereClause("\"", "\"", 2, incidentActionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.IncidentID = related.ID
	if o.R == nil {
		o.R = &incidentActionR{
			Incident: related,
		}
	} else {
		o.R.Incident = related
	}

	if related.R == nil {
		related.R = &incidentR{
			IncidentActions: IncidentActionSlice{o},
		}
	} else {
		related.R.IncidentActions = append(related.R.IncidentActions, o)
	}

	return nil
}

// SetTakenByUserWith of the incidentAction to the related item.
// Sets o.R.TakenByUserWith to related.
// Adds o to related.R.TakenByUserWithIncidentActions.
func (o *IncidentAction) SetTakenByUserWith(ctx context.Context, exec boil.ContextExecutor, insert bool, related *User) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"incident_actions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"taken_by_user_with_id"}),
		strmangle.WhereClause("\"", "\"", 2, incidentActionPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	queries.Assign(&o.TakenByUserWithID, related.ID)
	if o.R == nil {
		o.R = &incidentActionR{
			TakenByUserWith: related,
		}
	} else {
		o.R.TakenByUserWith = related
	}

	if related.R == nil {
		related.R = &userR{
			TakenByUserWithIncidentActions: IncidentActionSlice{o},
		}
	} else {
		related.R.TakenByUserWithIncidentActions = append(related.R.TakenByUserWithIncidentActions, o)
	}

	return nil
}

// RemoveTakenByUserWith relationship.
// Sets o.R.TakenByUserWith to nil.
// Removes o from all passed in related items' relationships struct.
func (o *IncidentAction) RemoveTakenByUserWith(ctx context.Context, exec boil.ContextExecutor, related *User) error {
	var err error

	queries.SetScanner(&o.TakenByUserWithID, nil)
	if _, err = o.Update(ctx, exec, boil.Whitelist("taken_by_user_with_id")); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	if o.R != nil {
		o.R.TakenByUserWith = nil
	}
	if related == nil || related.R == nil {
		return nil
	}

	for i, ri := range related.R.TakenByUserWithIncidentActions {
		if queries.Equal(o.TakenByUserWithID, ri.TakenByUserWithID) {
			continue
		}

		ln := len(related.R.TakenByUserWithIncidentActions)
		if ln > 1 && i < ln-1 {
			related.R.TakenByUserWithIncidentActions[i] = related.R.TakenByUserWithIncidentActions[ln-1]
		}
		related.R.TakenByUserWithIncidentActions = related.R.TakenByUserWithIncidentActions[:ln-1]
		break
	}
	return nil
}

// IncidentActions retrieves all the records using an executor.
func IncidentActions(mods ...qm.QueryMod) incidentActionQuery {
	mods = append(mods, qm.From("\"incident_actions\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"incident_actions\".*"})
	}

	return incidentActionQuery{q}
}

// FindIncidentAction retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindIncidentAction(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*IncidentAction, error) {
	incidentActionObj := &IncidentAction{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"incident_actions\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, incidentActionObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from incident_actions")
	}

	if err = incidentActionObj.doAfterSelectHooks(ctx, exec); err != nil {
		return incidentActionObj, err
	}

	return incidentActionObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *IncidentAction) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no incident_actions provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incidentActionColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	incidentActionInsertCacheMut.RLock()
	cache, cached := incidentActionInsertCache[key]
	incidentActionInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			incidentActionAllColumns,
			incidentActionColumnsWithDefault,
			incidentActionColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(incidentActionType, incidentActionMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(incidentActionType, incidentActionMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"incident_actions\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"incident_actions\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into incident_actions")
	}

	if !cached {
		incidentActionInsertCacheMut.Lock()
		incidentActionInsertCache[key] = cache
		incidentActionInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the IncidentAction.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *IncidentAction) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	incidentActionUpdateCacheMut.RLock()
	cache, cached := incidentActionUpdateCache[key]
	incidentActionUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			incidentActionAllColumns,
			incidentActionPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update incident_actions, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"incident_actions\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, incidentActionPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(incidentActionType, incidentActionMapping, append(wl, incidentActionPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update incident_actions row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for incident_actions")
	}

	if !cached {
		incidentActionUpdateCacheMut.Lock()
		incidentActionUpdateCache[key] = cache
		incidentActionUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q incidentActionQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for incident_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for incident_actions")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o IncidentActionSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incidentActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"incident_actions\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, incidentActionPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in incidentAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all incidentAction")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *IncidentAction) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no incident_actions provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(incidentActionColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	incidentActionUpsertCacheMut.RLock()
	cache, cached := incidentActionUpsertCache[key]
	incidentActionUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			incidentActionAllColumns,
			incidentActionColumnsWithDefault,
			incidentActionColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			incidentActionAllColumns,
			incidentActionPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert incident_actions, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(incidentActionPrimaryKeyColumns))
			copy(conflict, incidentActionPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"incident_actions\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(incidentActionType, incidentActionMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(incidentActionType, incidentActionMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert incident_actions")
	}

	if !cached {
		incidentActionUpsertCacheMut.Lock()
		incidentActionUpsertCache[key] = cache
		incidentActionUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single IncidentAction record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *IncidentAction) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no IncidentAction provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), incidentActionPrimaryKeyMapping)
	sql := "DELETE FROM \"incident_actions\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from incident_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for incident_actions")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q incidentActionQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no incidentActionQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from incident_actions")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for incident_actions")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o IncidentActionSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(incidentActionBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incidentActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"incident_actions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incidentActionPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from incidentAction slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for incident_actions")
	}

	if len(incidentActionAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *IncidentAction) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindIncidentAction(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *IncidentActionSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := IncidentActionSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), incidentActionPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"incident_actions\".* FROM \"incident_actions\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, incidentActionPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in IncidentActionSlice")
	}

	*o = slice

	return nil
}

// IncidentActionExists checks if the IncidentAction row exists.
func IncidentActionExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"incident_actions\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if incident_actions exists")
	}

	return exists, nil
}

// Exists checks if the IncidentAction row exists.
func (o *IncidentAction) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return IncidentActionExists(ctx, exec, o.ID)
}
