// Code generated by SQLBoiler 4.15.0 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MonitorCheckResult is an object representing the database table.
type MonitorCheckResult struct {
	ID               int       `boil:"id" json:"id" toml:"id" yaml:"id"`
	MonitorID        string    `boil:"monitor_id" json:"monitor_id" toml:"monitor_id" yaml:"monitor_id"`
	StatusCode       int16     `boil:"status_code" json:"status_code" toml:"status_code" yaml:"status_code"`
	Region           string    `boil:"region" json:"region" toml:"region" yaml:"region"`
	CheckedAt        time.Time `boil:"checked_at" json:"checked_at" toml:"checked_at" yaml:"checked_at"`
	ResponseTimeInMS int16     `boil:"response_time_in_ms" json:"response_time_in_ms" toml:"response_time_in_ms" yaml:"response_time_in_ms"`

	R *monitorCheckResultR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monitorCheckResultL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonitorCheckResultColumns = struct {
	ID               string
	MonitorID        string
	StatusCode       string
	Region           string
	CheckedAt        string
	ResponseTimeInMS string
}{
	ID:               "id",
	MonitorID:        "monitor_id",
	StatusCode:       "status_code",
	Region:           "region",
	CheckedAt:        "checked_at",
	ResponseTimeInMS: "response_time_in_ms",
}

var MonitorCheckResultTableColumns = struct {
	ID               string
	MonitorID        string
	StatusCode       string
	Region           string
	CheckedAt        string
	ResponseTimeInMS string
}{
	ID:               "monitor_check_results.id",
	MonitorID:        "monitor_check_results.monitor_id",
	StatusCode:       "monitor_check_results.status_code",
	Region:           "monitor_check_results.region",
	CheckedAt:        "monitor_check_results.checked_at",
	ResponseTimeInMS: "monitor_check_results.response_time_in_ms",
}

// Generated where

type whereHelperint struct{ field string }

func (w whereHelperint) EQ(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint) NEQ(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint) LT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint) LTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint) GT(x int) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint) GTE(x int) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint) IN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint) NIN(slice []int) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

type whereHelperint16 struct{ field string }

func (w whereHelperint16) EQ(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.EQ, x) }
func (w whereHelperint16) NEQ(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.NEQ, x) }
func (w whereHelperint16) LT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.LT, x) }
func (w whereHelperint16) LTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.LTE, x) }
func (w whereHelperint16) GT(x int16) qm.QueryMod  { return qmhelper.Where(w.field, qmhelper.GT, x) }
func (w whereHelperint16) GTE(x int16) qm.QueryMod { return qmhelper.Where(w.field, qmhelper.GTE, x) }
func (w whereHelperint16) IN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereIn(fmt.Sprintf("%s IN ?", w.field), values...)
}
func (w whereHelperint16) NIN(slice []int16) qm.QueryMod {
	values := make([]interface{}, 0, len(slice))
	for _, value := range slice {
		values = append(values, value)
	}
	return qm.WhereNotIn(fmt.Sprintf("%s NOT IN ?", w.field), values...)
}

var MonitorCheckResultWhere = struct {
	ID               whereHelperint
	MonitorID        whereHelperstring
	StatusCode       whereHelperint16
	Region           whereHelperstring
	CheckedAt        whereHelpertime_Time
	ResponseTimeInMS whereHelperint16
}{
	ID:               whereHelperint{field: "\"monitor_check_results\".\"id\""},
	MonitorID:        whereHelperstring{field: "\"monitor_check_results\".\"monitor_id\""},
	StatusCode:       whereHelperint16{field: "\"monitor_check_results\".\"status_code\""},
	Region:           whereHelperstring{field: "\"monitor_check_results\".\"region\""},
	CheckedAt:        whereHelpertime_Time{field: "\"monitor_check_results\".\"checked_at\""},
	ResponseTimeInMS: whereHelperint16{field: "\"monitor_check_results\".\"response_time_in_ms\""},
}

// MonitorCheckResultRels is where relationship names are stored.
var MonitorCheckResultRels = struct {
	Monitor string
}{
	Monitor: "Monitor",
}

// monitorCheckResultR is where relationships are stored.
type monitorCheckResultR struct {
	Monitor *Monitor `boil:"Monitor" json:"Monitor" toml:"Monitor" yaml:"Monitor"`
}

// NewStruct creates a new relationship struct
func (*monitorCheckResultR) NewStruct() *monitorCheckResultR {
	return &monitorCheckResultR{}
}

func (r *monitorCheckResultR) GetMonitor() *Monitor {
	if r == nil {
		return nil
	}
	return r.Monitor
}

// monitorCheckResultL is where Load methods for each relationship are stored.
type monitorCheckResultL struct{}

var (
	monitorCheckResultAllColumns            = []string{"id", "monitor_id", "status_code", "region", "checked_at", "response_time_in_ms"}
	monitorCheckResultColumnsWithoutDefault = []string{"monitor_id", "status_code", "region", "response_time_in_ms"}
	monitorCheckResultColumnsWithDefault    = []string{"id", "checked_at"}
	monitorCheckResultPrimaryKeyColumns     = []string{"id"}
	monitorCheckResultGeneratedColumns      = []string{}
)

type (
	// MonitorCheckResultSlice is an alias for a slice of pointers to MonitorCheckResult.
	// This should almost always be used instead of []MonitorCheckResult.
	MonitorCheckResultSlice []*MonitorCheckResult
	// MonitorCheckResultHook is the signature for custom MonitorCheckResult hook methods
	MonitorCheckResultHook func(context.Context, boil.ContextExecutor, *MonitorCheckResult) error

	monitorCheckResultQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monitorCheckResultType                 = reflect.TypeOf(&MonitorCheckResult{})
	monitorCheckResultMapping              = queries.MakeStructMapping(monitorCheckResultType)
	monitorCheckResultPrimaryKeyMapping, _ = queries.BindMapping(monitorCheckResultType, monitorCheckResultMapping, monitorCheckResultPrimaryKeyColumns)
	monitorCheckResultInsertCacheMut       sync.RWMutex
	monitorCheckResultInsertCache          = make(map[string]insertCache)
	monitorCheckResultUpdateCacheMut       sync.RWMutex
	monitorCheckResultUpdateCache          = make(map[string]updateCache)
	monitorCheckResultUpsertCacheMut       sync.RWMutex
	monitorCheckResultUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monitorCheckResultAfterSelectHooks []MonitorCheckResultHook

var monitorCheckResultBeforeInsertHooks []MonitorCheckResultHook
var monitorCheckResultAfterInsertHooks []MonitorCheckResultHook

var monitorCheckResultBeforeUpdateHooks []MonitorCheckResultHook
var monitorCheckResultAfterUpdateHooks []MonitorCheckResultHook

var monitorCheckResultBeforeDeleteHooks []MonitorCheckResultHook
var monitorCheckResultAfterDeleteHooks []MonitorCheckResultHook

var monitorCheckResultBeforeUpsertHooks []MonitorCheckResultHook
var monitorCheckResultAfterUpsertHooks []MonitorCheckResultHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonitorCheckResult) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonitorCheckResult) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonitorCheckResult) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonitorCheckResult) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonitorCheckResult) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonitorCheckResult) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonitorCheckResult) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonitorCheckResult) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonitorCheckResult) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorCheckResultAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonitorCheckResultHook registers your hook function for all future operations.
func AddMonitorCheckResultHook(hookPoint boil.HookPoint, monitorCheckResultHook MonitorCheckResultHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monitorCheckResultAfterSelectHooks = append(monitorCheckResultAfterSelectHooks, monitorCheckResultHook)
	case boil.BeforeInsertHook:
		monitorCheckResultBeforeInsertHooks = append(monitorCheckResultBeforeInsertHooks, monitorCheckResultHook)
	case boil.AfterInsertHook:
		monitorCheckResultAfterInsertHooks = append(monitorCheckResultAfterInsertHooks, monitorCheckResultHook)
	case boil.BeforeUpdateHook:
		monitorCheckResultBeforeUpdateHooks = append(monitorCheckResultBeforeUpdateHooks, monitorCheckResultHook)
	case boil.AfterUpdateHook:
		monitorCheckResultAfterUpdateHooks = append(monitorCheckResultAfterUpdateHooks, monitorCheckResultHook)
	case boil.BeforeDeleteHook:
		monitorCheckResultBeforeDeleteHooks = append(monitorCheckResultBeforeDeleteHooks, monitorCheckResultHook)
	case boil.AfterDeleteHook:
		monitorCheckResultAfterDeleteHooks = append(monitorCheckResultAfterDeleteHooks, monitorCheckResultHook)
	case boil.BeforeUpsertHook:
		monitorCheckResultBeforeUpsertHooks = append(monitorCheckResultBeforeUpsertHooks, monitorCheckResultHook)
	case boil.AfterUpsertHook:
		monitorCheckResultAfterUpsertHooks = append(monitorCheckResultAfterUpsertHooks, monitorCheckResultHook)
	}
}

// One returns a single monitorCheckResult record from the query.
func (q monitorCheckResultQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonitorCheckResult, error) {
	o := &MonitorCheckResult{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monitor_check_results")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MonitorCheckResult records from the query.
func (q monitorCheckResultQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonitorCheckResultSlice, error) {
	var o []*MonitorCheckResult

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonitorCheckResult slice")
	}

	if len(monitorCheckResultAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MonitorCheckResult records in the query.
func (q monitorCheckResultQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monitor_check_results rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q monitorCheckResultQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monitor_check_results exists")
	}

	return count > 0, nil
}

// Monitor pointed to by the foreign key.
func (o *MonitorCheckResult) Monitor(mods ...qm.QueryMod) monitorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MonitorID),
	}

	queryMods = append(queryMods, mods...)

	return Monitors(queryMods...)
}

// LoadMonitor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monitorCheckResultL) LoadMonitor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonitorCheckResult interface{}, mods queries.Applicator) error {
	var slice []*MonitorCheckResult
	var object *MonitorCheckResult

	if singular {
		var ok bool
		object, ok = maybeMonitorCheckResult.(*MonitorCheckResult)
		if !ok {
			object = new(MonitorCheckResult)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonitorCheckResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonitorCheckResult))
			}
		}
	} else {
		s, ok := maybeMonitorCheckResult.(*[]*MonitorCheckResult)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonitorCheckResult)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonitorCheckResult))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monitorCheckResultR{}
		}
		args = append(args, object.MonitorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monitorCheckResultR{}
			}

			for _, a := range args {
				if a == obj.MonitorID {
					continue Outer
				}
			}

			args = append(args, obj.MonitorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monitors`),
		qm.WhereIn(`monitors.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Monitor")
	}

	var resultSlice []*Monitor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Monitor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monitors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monitors")
	}

	if len(monitorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Monitor = foreign
		if foreign.R == nil {
			foreign.R = &monitorR{}
		}
		foreign.R.MonitorCheckResults = append(foreign.R.MonitorCheckResults, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MonitorID == foreign.ID {
				local.R.Monitor = foreign
				if foreign.R == nil {
					foreign.R = &monitorR{}
				}
				foreign.R.MonitorCheckResults = append(foreign.R.MonitorCheckResults, local)
				break
			}
		}
	}

	return nil
}

// SetMonitor of the monitorCheckResult to the related item.
// Sets o.R.Monitor to related.
// Adds o to related.R.MonitorCheckResults.
func (o *MonitorCheckResult) SetMonitor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Monitor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monitor_check_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"monitor_id"}),
		strmangle.WhereClause("\"", "\"", 2, monitorCheckResultPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MonitorID = related.ID
	if o.R == nil {
		o.R = &monitorCheckResultR{
			Monitor: related,
		}
	} else {
		o.R.Monitor = related
	}

	if related.R == nil {
		related.R = &monitorR{
			MonitorCheckResults: MonitorCheckResultSlice{o},
		}
	} else {
		related.R.MonitorCheckResults = append(related.R.MonitorCheckResults, o)
	}

	return nil
}

// MonitorCheckResults retrieves all the records using an executor.
func MonitorCheckResults(mods ...qm.QueryMod) monitorCheckResultQuery {
	mods = append(mods, qm.From("\"monitor_check_results\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monitor_check_results\".*"})
	}

	return monitorCheckResultQuery{q}
}

// FindMonitorCheckResult retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonitorCheckResult(ctx context.Context, exec boil.ContextExecutor, iD int, selectCols ...string) (*MonitorCheckResult, error) {
	monitorCheckResultObj := &MonitorCheckResult{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monitor_check_results\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, monitorCheckResultObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monitor_check_results")
	}

	if err = monitorCheckResultObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monitorCheckResultObj, err
	}

	return monitorCheckResultObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonitorCheckResult) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitor_check_results provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitorCheckResultColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monitorCheckResultInsertCacheMut.RLock()
	cache, cached := monitorCheckResultInsertCache[key]
	monitorCheckResultInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monitorCheckResultAllColumns,
			monitorCheckResultColumnsWithDefault,
			monitorCheckResultColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monitorCheckResultType, monitorCheckResultMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monitorCheckResultType, monitorCheckResultMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monitor_check_results\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monitor_check_results\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monitor_check_results")
	}

	if !cached {
		monitorCheckResultInsertCacheMut.Lock()
		monitorCheckResultInsertCache[key] = cache
		monitorCheckResultInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MonitorCheckResult.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonitorCheckResult) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monitorCheckResultUpdateCacheMut.RLock()
	cache, cached := monitorCheckResultUpdateCache[key]
	monitorCheckResultUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monitorCheckResultAllColumns,
			monitorCheckResultPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monitor_check_results, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monitor_check_results\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monitorCheckResultPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monitorCheckResultType, monitorCheckResultMapping, append(wl, monitorCheckResultPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monitor_check_results row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monitor_check_results")
	}

	if !cached {
		monitorCheckResultUpdateCacheMut.Lock()
		monitorCheckResultUpdateCache[key] = cache
		monitorCheckResultUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q monitorCheckResultQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monitor_check_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monitor_check_results")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonitorCheckResultSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorCheckResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monitor_check_results\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monitorCheckResultPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monitorCheckResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monitorCheckResult")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonitorCheckResult) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitor_check_results provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitorCheckResultColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monitorCheckResultUpsertCacheMut.RLock()
	cache, cached := monitorCheckResultUpsertCache[key]
	monitorCheckResultUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monitorCheckResultAllColumns,
			monitorCheckResultColumnsWithDefault,
			monitorCheckResultColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monitorCheckResultAllColumns,
			monitorCheckResultPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monitor_check_results, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monitorCheckResultPrimaryKeyColumns))
			copy(conflict, monitorCheckResultPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monitor_check_results\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monitorCheckResultType, monitorCheckResultMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monitorCheckResultType, monitorCheckResultMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monitor_check_results")
	}

	if !cached {
		monitorCheckResultUpsertCacheMut.Lock()
		monitorCheckResultUpsertCache[key] = cache
		monitorCheckResultUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MonitorCheckResult record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonitorCheckResult) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonitorCheckResult provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monitorCheckResultPrimaryKeyMapping)
	sql := "DELETE FROM \"monitor_check_results\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monitor_check_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monitor_check_results")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q monitorCheckResultQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monitorCheckResultQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitor_check_results")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitor_check_results")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonitorCheckResultSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monitorCheckResultBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorCheckResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monitor_check_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitorCheckResultPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitorCheckResult slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitor_check_results")
	}

	if len(monitorCheckResultAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonitorCheckResult) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonitorCheckResult(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonitorCheckResultSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonitorCheckResultSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorCheckResultPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monitor_check_results\".* FROM \"monitor_check_results\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitorCheckResultPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonitorCheckResultSlice")
	}

	*o = slice

	return nil
}

// MonitorCheckResultExists checks if the MonitorCheckResult row exists.
func MonitorCheckResultExists(ctx context.Context, exec boil.ContextExecutor, iD int) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monitor_check_results\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monitor_check_results exists")
	}

	return exists, nil
}

// Exists checks if the MonitorCheckResult row exists.
func (o *MonitorCheckResult) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonitorCheckResultExists(ctx, exec, o.ID)
}
