// Package client provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package client

import (
	"bytes"
	"compress/gzip"
	"context"
	"encoding/base64"
	"encoding/json"
	"fmt"
	"io"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
)

// CreateAnAccountRequest defines model for CreateAnAccountRequest.
type CreateAnAccountRequest struct {
	AccountName string `json:"account_name"`
	Email       string `json:"email"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Password    string `json:"password"`
}

// CreateMonitorRequest defines model for CreateMonitorRequest.
type CreateMonitorRequest struct {
	AlertTriggers    []string         `json:"alert_triggers"`
	Endpoint         string           `json:"endpoint"`
	OnCallEscalation OnCallEscalation `json:"on_call_escalation"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// OnCallEscalation defines model for OnCallEscalation.
type OnCallEscalation struct {
	NotificationMethods     []string `json:"notification_methods"`
	TeamMembersToBeNotified []string `json:"team_members_to_be_notified"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// CreateAnAccountJSONRequestBody defines body for CreateAnAccount for application/json ContentType.
type CreateAnAccountJSONRequestBody = CreateAnAccountRequest

// CreateMonitorJSONRequestBody defines body for CreateMonitor for application/json ContentType.
type CreateMonitorJSONRequestBody = CreateMonitorRequest

// RequestEditorFn  is the function signature for the RequestEditor callback function
type RequestEditorFn func(ctx context.Context, req *http.Request) error

// Doer performs HTTP requests.
//
// The standard http.Client implements this interface.
type HttpRequestDoer interface {
	Do(req *http.Request) (*http.Response, error)
}

// Client which conforms to the OpenAPI3 specification for this service.
type Client struct {
	// The endpoint of the server conforming to this interface, with scheme,
	// https://api.deepmap.com for example. This can contain a path relative
	// to the server, such as https://api.deepmap.com/dev-test, and all the
	// paths in the swagger spec will be appended to the server.
	Server string

	// Doer for performing requests, typically a *http.Client with any
	// customized settings, such as certificate chains.
	Client HttpRequestDoer

	// A list of callbacks for modifying requests which are generated before sending over
	// the network.
	RequestEditors []RequestEditorFn
}

// ClientOption allows setting custom parameters during construction
type ClientOption func(*Client) error

// Creates a new Client, with reasonable defaults
func NewClient(server string, opts ...ClientOption) (*Client, error) {
	// create a client with sane default values
	client := Client{
		Server: server,
	}
	// mutate client and add all optional params
	for _, o := range opts {
		if err := o(&client); err != nil {
			return nil, err
		}
	}
	// ensure the server URL always has a trailing slash
	if !strings.HasSuffix(client.Server, "/") {
		client.Server += "/"
	}
	// create httpClient, if not already present
	if client.Client == nil {
		client.Client = &http.Client{}
	}
	return &client, nil
}

// WithHTTPClient allows overriding the default Doer, which is
// automatically created using http.Client. This is useful for tests.
func WithHTTPClient(doer HttpRequestDoer) ClientOption {
	return func(c *Client) error {
		c.Client = doer
		return nil
	}
}

// WithRequestEditorFn allows setting up a callback function, which will be
// called right before sending the request. This can be used to mutate the request.
func WithRequestEditorFn(fn RequestEditorFn) ClientOption {
	return func(c *Client) error {
		c.RequestEditors = append(c.RequestEditors, fn)
		return nil
	}
}

// The interface specification for the client above.
type ClientInterface interface {
	// CreateAnAccount request with any body
	CreateAnAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateAnAccount(ctx context.Context, body CreateAnAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)

	// ConfirmAccount request
	ConfirmAccount(ctx context.Context, confirmationCode string, reqEditors ...RequestEditorFn) (*http.Response, error)

	// CreateMonitor request with any body
	CreateMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error)

	CreateMonitor(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error)
}

func (c *Client) CreateAnAccountWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnAccountRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateAnAccount(ctx context.Context, body CreateAnAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateAnAccountRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) ConfirmAccount(ctx context.Context, confirmationCode string, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewConfirmAccountRequest(c.Server, confirmationCode)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitorWithBody(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitorRequestWithBody(c.Server, contentType, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

func (c *Client) CreateMonitor(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*http.Response, error) {
	req, err := NewCreateMonitorRequest(c.Server, body)
	if err != nil {
		return nil, err
	}
	req = req.WithContext(ctx)
	if err := c.applyEditors(ctx, req, reqEditors); err != nil {
		return nil, err
	}
	return c.Client.Do(req)
}

// NewCreateAnAccountRequest calls the generic CreateAnAccount builder with application/json body
func NewCreateAnAccountRequest(server string, body CreateAnAccountJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateAnAccountRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateAnAccountRequestWithBody generates requests for CreateAnAccount with any type of body
func NewCreateAnAccountRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

// NewConfirmAccountRequest generates requests for ConfirmAccount
func NewConfirmAccountRequest(server string, confirmationCode string) (*http.Request, error) {
	var err error

	var pathParam0 string

	pathParam0, err = runtime.StyleParamWithLocation("simple", false, "confirmationCode", runtime.ParamLocationPath, confirmationCode)
	if err != nil {
		return nil, err
	}

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/accounts/confirm/%s", pathParam0)
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), nil)
	if err != nil {
		return nil, err
	}

	return req, nil
}

// NewCreateMonitorRequest calls the generic CreateMonitor builder with application/json body
func NewCreateMonitorRequest(server string, body CreateMonitorJSONRequestBody) (*http.Request, error) {
	var bodyReader io.Reader
	buf, err := json.Marshal(body)
	if err != nil {
		return nil, err
	}
	bodyReader = bytes.NewReader(buf)
	return NewCreateMonitorRequestWithBody(server, "application/json", bodyReader)
}

// NewCreateMonitorRequestWithBody generates requests for CreateMonitor with any type of body
func NewCreateMonitorRequestWithBody(server string, contentType string, body io.Reader) (*http.Request, error) {
	var err error

	serverURL, err := url.Parse(server)
	if err != nil {
		return nil, err
	}

	operationPath := fmt.Sprintf("/monitors")
	if operationPath[0] == '/' {
		operationPath = "." + operationPath
	}

	queryURL, err := serverURL.Parse(operationPath)
	if err != nil {
		return nil, err
	}

	req, err := http.NewRequest("POST", queryURL.String(), body)
	if err != nil {
		return nil, err
	}

	req.Header.Add("Content-Type", contentType)

	return req, nil
}

func (c *Client) applyEditors(ctx context.Context, req *http.Request, additionalEditors []RequestEditorFn) error {
	for _, r := range c.RequestEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	for _, r := range additionalEditors {
		if err := r(ctx, req); err != nil {
			return err
		}
	}
	return nil
}

// ClientWithResponses builds on ClientInterface to offer response payloads
type ClientWithResponses struct {
	ClientInterface
}

// NewClientWithResponses creates a new ClientWithResponses, which wraps
// Client with return type handling
func NewClientWithResponses(server string, opts ...ClientOption) (*ClientWithResponses, error) {
	client, err := NewClient(server, opts...)
	if err != nil {
		return nil, err
	}
	return &ClientWithResponses{client}, nil
}

// WithBaseURL overrides the baseURL.
func WithBaseURL(baseURL string) ClientOption {
	return func(c *Client) error {
		newBaseURL, err := url.Parse(baseURL)
		if err != nil {
			return err
		}
		c.Server = newBaseURL.String()
		return nil
	}
}

// ClientWithResponsesInterface is the interface specification for the client with responses above.
type ClientWithResponsesInterface interface {
	// CreateAnAccount request with any body
	CreateAnAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnAccountResponse, error)

	CreateAnAccountWithResponse(ctx context.Context, body CreateAnAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnAccountResponse, error)

	// ConfirmAccount request
	ConfirmAccountWithResponse(ctx context.Context, confirmationCode string, reqEditors ...RequestEditorFn) (*ConfirmAccountResponse, error)

	// CreateMonitor request with any body
	CreateMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error)

	CreateMonitorWithResponse(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error)
}

type CreateAnAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateAnAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateAnAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type ConfirmAccountResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r ConfirmAccountResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r ConfirmAccountResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

type CreateMonitorResponse struct {
	Body         []byte
	HTTPResponse *http.Response
	JSONDefault  *ErrorResponse
}

// Status returns HTTPResponse.Status
func (r CreateMonitorResponse) Status() string {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.Status
	}
	return http.StatusText(0)
}

// StatusCode returns HTTPResponse.StatusCode
func (r CreateMonitorResponse) StatusCode() int {
	if r.HTTPResponse != nil {
		return r.HTTPResponse.StatusCode
	}
	return 0
}

// CreateAnAccountWithBodyWithResponse request with arbitrary body returning *CreateAnAccountResponse
func (c *ClientWithResponses) CreateAnAccountWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateAnAccountResponse, error) {
	rsp, err := c.CreateAnAccountWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnAccountResponse(rsp)
}

func (c *ClientWithResponses) CreateAnAccountWithResponse(ctx context.Context, body CreateAnAccountJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateAnAccountResponse, error) {
	rsp, err := c.CreateAnAccount(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateAnAccountResponse(rsp)
}

// ConfirmAccountWithResponse request returning *ConfirmAccountResponse
func (c *ClientWithResponses) ConfirmAccountWithResponse(ctx context.Context, confirmationCode string, reqEditors ...RequestEditorFn) (*ConfirmAccountResponse, error) {
	rsp, err := c.ConfirmAccount(ctx, confirmationCode, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseConfirmAccountResponse(rsp)
}

// CreateMonitorWithBodyWithResponse request with arbitrary body returning *CreateMonitorResponse
func (c *ClientWithResponses) CreateMonitorWithBodyWithResponse(ctx context.Context, contentType string, body io.Reader, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error) {
	rsp, err := c.CreateMonitorWithBody(ctx, contentType, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitorResponse(rsp)
}

func (c *ClientWithResponses) CreateMonitorWithResponse(ctx context.Context, body CreateMonitorJSONRequestBody, reqEditors ...RequestEditorFn) (*CreateMonitorResponse, error) {
	rsp, err := c.CreateMonitor(ctx, body, reqEditors...)
	if err != nil {
		return nil, err
	}
	return ParseCreateMonitorResponse(rsp)
}

// ParseCreateAnAccountResponse parses an HTTP response from a CreateAnAccountWithResponse call
func ParseCreateAnAccountResponse(rsp *http.Response) (*CreateAnAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateAnAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseConfirmAccountResponse parses an HTTP response from a ConfirmAccountWithResponse call
func ParseConfirmAccountResponse(rsp *http.Response) (*ConfirmAccountResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &ConfirmAccountResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// ParseCreateMonitorResponse parses an HTTP response from a CreateMonitorWithResponse call
func ParseCreateMonitorResponse(rsp *http.Response) (*CreateMonitorResponse, error) {
	bodyBytes, err := io.ReadAll(rsp.Body)
	defer func() { _ = rsp.Body.Close() }()
	if err != nil {
		return nil, err
	}

	response := &CreateMonitorResponse{
		Body:         bodyBytes,
		HTTPResponse: rsp,
	}

	switch {
	case strings.Contains(rsp.Header.Get("Content-Type"), "json") && true:
		var dest ErrorResponse
		if err := json.Unmarshal(bodyBytes, &dest); err != nil {
			return nil, err
		}
		response.JSONDefault = &dest

	}

	return response, nil
}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3Y7bRg99FWG+D8iN1nKam0BXdWwHcLe7C9gLtEVgCPSItibRzCgcalNjoXcvZiT/",
	"yutkgRToneaPPDw8JPUspNWVNWjYifRZELrKGodhMcE11CVPiSz5tbSG0bD/hKoqlQRW1iSfnTV+z8kC",
	"Nfiv/xOuRSr+lxyMJ+2pS4K1eedGNE0TixydJFV5YyIVo2iDBknJCP3ViA53485HQDcmBMaRGUlpa8Nz",
	"/FqjC+AqshUSqzYKaM8zAxr9mrcVilQ4JmU2ookFalDlxZO1InflYQnXTitw7pul/MJhEwvCr7UizEX6",
	"6RThiddjHzugR5aXTdzRcGeNYs/rSySUSJwxqc0GKewoRu0uAu82gAi2gR+TV1a1ee9dtiaTUJYZOgkl",
	"tCm8LoAHM4aynB7un9Ox9xefw77ozpNwKqpe9LhT8KnSwqtI1o6t7sQmbY6Rq2URgYveBMIzZbLa4RsR",
	"96PX6BxssG96FB2tI1jZmiMusPXSt3TOQHdrZ365f2BXn1Gyd92jsRe1sazWXZFmGrmw+Sszzwg606hX",
	"SC5jm60wa41i/hpDZ9FdsxpfRr0MtY+yJsXbhRdSG+IHBEIa1Vz41SqsPlrSwCIVv/3xKLqO4cG0pwfu",
	"C+bKY13kX25xG+LxmSsQ8nCtLWzx581icntzO/3r8BIq5V/4t+icsmY2ufZ8uljMHu5vZpO+BR8W/s1I",
	"BsqJla4vJI/SpUmyUVzUq4G0OlmX9pv8kuR2haTBJPPpaHI3HWjPXk3lDz3y4JVZ211bBxnKu2uFvgVp",
	"ZexAFmA2YNSvG3/gDYlev96bjEWpJHYF2IV/N3t8Bark99l4er8IsQT5kXYP6wXSk5L4Y3HFghWXeIrr",
	"Ccm1YIeD4eBt6FsVGqiUSMW7wXDwLnRVLkICkq4fh0Vl23bqCytocpaL9Hz2iFbg6PiDzbc/bVS+MOGa",
	"04JiqjFsHE3uX4Zv+1Iaz6ejx+mkzWCY7C8B2NtKTn4BQhHWWgNt9xxEYCLYs8Cwcb7ERzsGQ+HuCU2k",
	"NV5ayXP3EVgZ2xybK1y3Vw9UV0CgkcMc+9SVnU/eoejOrYtzvuKjDJy34mWPy+EFLh/uP87mdz+RzRby",
	"97nU7aT/rji7P4J/VZpnfx3/MWFGek/BjssdKcumHSj0tFPRoUWlSVJaCWVhHafvh++Holk2/wQAAP//",
	"U6+q9SgLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
