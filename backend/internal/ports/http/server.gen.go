// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

// CreateAnAccountRequest defines model for CreateAnAccountRequest.
type CreateAnAccountRequest struct {
	AccountName string `json:"account_name"`
	Email       string `json:"email"`
	FirstName   string `json:"first_name"`
	LastName    string `json:"last_name"`
	Password    string `json:"password"`
}

// CreateMonitorRequest defines model for CreateMonitorRequest.
type CreateMonitorRequest struct {
	AlertTriggers    []string         `json:"alert_triggers"`
	Endpoint         string           `json:"endpoint"`
	OnCallEscalation OnCallEscalation `json:"on_call_escalation"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// OnCallEscalation defines model for OnCallEscalation.
type OnCallEscalation struct {
	NotificationMethods     []string `json:"notification_methods"`
	TeamMembersToBeNotified []string `json:"team_members_to_be_notified"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// CreateAnAccountJSONRequestBody defines body for CreateAnAccount for application/json ContentType.
type CreateAnAccountJSONRequestBody = CreateAnAccountRequest

// CreateMonitorJSONRequestBody defines body for CreateMonitor for application/json ContentType.
type CreateMonitorJSONRequestBody = CreateMonitorRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Create an account
	// (POST /accounts)
	CreateAnAccount(ctx echo.Context) error
	// Confirm account
	// (POST /accounts/confirm/{confirmationCode})
	ConfirmAccount(ctx echo.Context, confirmationCode string) error
	// Create a monitor
	// (POST /monitors)
	CreateMonitor(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAnAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAnAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAnAccount(ctx)
	return err
}

// ConfirmAccount converts echo context to params.
func (w *ServerInterfaceWrapper) ConfirmAccount(ctx echo.Context) error {
	var err error
	// ------------- Path parameter "confirmationCode" -------------
	var confirmationCode string

	err = runtime.BindStyledParameterWithLocation("simple", false, "confirmationCode", runtime.ParamLocationPath, ctx.Param("confirmationCode"), &confirmationCode)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter confirmationCode: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.ConfirmAccount(ctx, confirmationCode)
	return err
}

// CreateMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMonitor(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMonitor(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/accounts", wrapper.CreateAnAccount)
	router.POST(baseURL+"/accounts/confirm/:confirmationCode", wrapper.ConfirmAccount)
	router.POST(baseURL+"/monitors", wrapper.CreateMonitor)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8xW3Y7bRg99FWG+D8iN1nKam0BXdWwHcLe7C9gLtEVgCPSItibRzCgcalNjoXcvZiT/",
	"yutkgRToneaPPDw8JPUspNWVNWjYifRZELrKGodhMcE11CVPiSz5tbSG0bD/hKoqlQRW1iSfnTV+z8kC",
	"Nfiv/xOuRSr+lxyMJ+2pS4K1eedGNE0TixydJFV5YyIVo2iDBknJCP3ViA53485HQDcmBMaRGUlpa8Nz",
	"/FqjC+AqshUSqzYKaM8zAxr9mrcVilQ4JmU2ookFalDlxZO1InflYQnXTitw7pul/MJhEwvCr7UizEX6",
	"6RThiddjHzugR5aXTdzRcGeNYs/rSySUSJwxqc0GKewoRu0uAu82gAi2gR+TV1a1ee9dtiaTUJYZOgkl",
	"tCm8LoAHM4aynB7un9Ox9xefw77ozpNwKqpe9LhT8KnSwqtI1o6t7sQmbY6Rq2URgYveBMIzZbLa4RsR",
	"96PX6BxssG96FB2tI1jZmiMusPXSt3TOQHdrZ365f2BXn1Gyd92jsRe1sazWXZFmGrmw+Sszzwg606hX",
	"SC5jm60wa41i/hpDZ9FdsxpfRr0MtY+yJsXbhRdSG+IHBEIa1Vz41SqsPlrSwCIVv/3xKLqO4cG0pwfu",
	"C+bKY13kX25xG+LxmSsQ8nCtLWzx581icntzO/3r8BIq5V/4t+icsmY2ufZ8uljMHu5vZpO+BR8W/s1I",
	"BsqJla4vJI/SpUmyUVzUq4G0OlmX9pv8kuR2haTBJPPpaHI3HWjPXk3lDz3y4JVZ211bBxnKu2uFvgVp",
	"ZexAFmA2YNSvG3/gDYlev96bjEWpJHYF2IV/N3t8Bark99l4er8IsQT5kXYP6wXSk5L4Y3HFghWXeIrr",
	"Ccm1YIeD4eBt6FsVGqiUSMW7wXDwLnRVLkICkq4fh0Vl23bqCytocpaL9Hz2iFbg6PiDzbc/bVS+MOGa",
	"04JiqjFsHE3uX4Zv+1Iaz6ejx+mkzWCY7C8B2NtKTn4BQhHWWgNt9xxEYCLYs8Cwcb7ERzsGQ+HuCU2k",
	"NV5ayXP3EVgZ2xybK1y3Vw9UV0CgkcMc+9SVnU/eoejOrYtzvuKjDJy34mWPy+EFLh/uP87mdz+RzRby",
	"97nU7aT/rji7P4J/VZpnfx3/MWFGek/BjssdKcumHSj0tFPRoUWlSVJaCWVhHafvh++Holk2/wQAAP//",
	"U6+q9SgLAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
