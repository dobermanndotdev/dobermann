// Package http provides primitives to interact with the openapi HTTP API.
//
// Code generated by github.com/deepmap/oapi-codegen version v1.12.4 DO NOT EDIT.
package http

import (
	"bytes"
	"compress/gzip"
	"encoding/base64"
	"fmt"
	"net/http"
	"net/url"
	"path"
	"strings"
	"time"

	"github.com/deepmap/oapi-codegen/pkg/runtime"
	"github.com/getkin/kin-openapi/openapi3"
	"github.com/labstack/echo/v4"
)

const (
	BearerAuthScopes = "BearerAuth.Scopes"
)

// CreateAccountRequest defines model for CreateAccountRequest.
type CreateAccountRequest struct {
	AccountName string `json:"account_name"`
	Email       string `json:"email"`
	Password    string `json:"password"`
}

// CreateMonitorRequest defines model for CreateMonitorRequest.
type CreateMonitorRequest struct {
	EndpointUrl string `json:"endpoint_url"`
}

// ErrorResponse defines model for ErrorResponse.
type ErrorResponse struct {
	// Error Error custom error code such as 'email_in_use'
	Error string `json:"error"`

	// Message A description about the error
	Message string `json:"message"`
}

// GetAllMonitorsPayload defines model for GetAllMonitorsPayload.
type GetAllMonitorsPayload struct {
	Data       []Monitor `json:"data"`
	Page       int       `json:"page"`
	PageCount  int       `json:"page_count"`
	PerPage    int       `json:"per_page"`
	TotalCount int64     `json:"total_count"`
}

// Incident defines model for Incident.
type Incident struct {
	CreatedAt time.Time `json:"created_at"`
	Id        string    `json:"id"`
}

// LogInPayload defines model for LogInPayload.
type LogInPayload struct {
	Token string `json:"token"`
}

// LogInRequest defines model for LogInRequest.
type LogInRequest struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

// Monitor defines model for Monitor.
type Monitor struct {
	CreatedAt     time.Time  `json:"created_at"`
	EndpointUrl   string     `json:"endpoint_url"`
	Id            string     `json:"id"`
	Incidents     []Incident `json:"incidents"`
	IsEndpointUp  bool       `json:"is_endpoint_up"`
	LastCheckedAt *time.Time `json:"last_checked_at,omitempty"`
}

// DefaultError defines model for DefaultError.
type DefaultError = ErrorResponse

// GetAllMonitorsParams defines parameters for GetAllMonitors.
type GetAllMonitorsParams struct {
	Page  *int `form:"page,omitempty" json:"page,omitempty"`
	Limit *int `form:"limit,omitempty" json:"limit,omitempty"`
}

// CreateAccountJSONRequestBody defines body for CreateAccount for application/json ContentType.
type CreateAccountJSONRequestBody = CreateAccountRequest

// LoginJSONRequestBody defines body for Login for application/json ContentType.
type LoginJSONRequestBody = LogInRequest

// CreateMonitorJSONRequestBody defines body for CreateMonitor for application/json ContentType.
type CreateMonitorJSONRequestBody = CreateMonitorRequest

// ServerInterface represents all server handlers.
type ServerInterface interface {
	// Creates a new account
	// (POST /auth/accounts)
	CreateAccount(ctx echo.Context) error
	// Log in
	// (POST /auth/login)
	Login(ctx echo.Context) error
	// Get all monitors in a with pagination
	// (GET /monitors)
	GetAllMonitors(ctx echo.Context, params GetAllMonitorsParams) error
	// Create a new monitor
	// (POST /monitors)
	CreateMonitor(ctx echo.Context) error
}

// ServerInterfaceWrapper converts echo contexts to parameters.
type ServerInterfaceWrapper struct {
	Handler ServerInterface
}

// CreateAccount converts echo context to params.
func (w *ServerInterfaceWrapper) CreateAccount(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateAccount(ctx)
	return err
}

// Login converts echo context to params.
func (w *ServerInterfaceWrapper) Login(ctx echo.Context) error {
	var err error

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.Login(ctx)
	return err
}

// GetAllMonitors converts echo context to params.
func (w *ServerInterfaceWrapper) GetAllMonitors(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Parameter object where we will unmarshal all parameters from the context
	var params GetAllMonitorsParams
	// ------------- Optional query parameter "page" -------------

	err = runtime.BindQueryParameter("form", true, false, "page", ctx.QueryParams(), &params.Page)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter page: %s", err))
	}

	// ------------- Optional query parameter "limit" -------------

	err = runtime.BindQueryParameter("form", true, false, "limit", ctx.QueryParams(), &params.Limit)
	if err != nil {
		return echo.NewHTTPError(http.StatusBadRequest, fmt.Sprintf("Invalid format for parameter limit: %s", err))
	}

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.GetAllMonitors(ctx, params)
	return err
}

// CreateMonitor converts echo context to params.
func (w *ServerInterfaceWrapper) CreateMonitor(ctx echo.Context) error {
	var err error

	ctx.Set(BearerAuthScopes, []string{""})

	// Invoke the callback with all the unmarshalled arguments
	err = w.Handler.CreateMonitor(ctx)
	return err
}

// This is a simple interface which specifies echo.Route addition functions which
// are present on both echo.Echo and echo.Group, since we want to allow using
// either of them for path registration
type EchoRouter interface {
	CONNECT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	DELETE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	GET(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	HEAD(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	OPTIONS(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PATCH(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	POST(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	PUT(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
	TRACE(path string, h echo.HandlerFunc, m ...echo.MiddlewareFunc) *echo.Route
}

// RegisterHandlers adds each server route to the EchoRouter.
func RegisterHandlers(router EchoRouter, si ServerInterface) {
	RegisterHandlersWithBaseURL(router, si, "")
}

// Registers handlers, and prepends BaseURL to the paths, so that the paths
// can be served under a prefix.
func RegisterHandlersWithBaseURL(router EchoRouter, si ServerInterface, baseURL string) {

	wrapper := ServerInterfaceWrapper{
		Handler: si,
	}

	router.POST(baseURL+"/auth/accounts", wrapper.CreateAccount)
	router.POST(baseURL+"/auth/login", wrapper.Login)
	router.GET(baseURL+"/monitors", wrapper.GetAllMonitors)
	router.POST(baseURL+"/monitors", wrapper.CreateMonitor)

}

// Base64 encoded, gzipped, json marshaled Swagger object
var swaggerSpec = []string{

	"H4sIAAAAAAAC/8RX0W/bthP+Vwj+fkBfNMtZh6Hw09zYC7wlbZFk2EMQGGfqLLERSYU8JTUC/+8DKcmS",
	"YrlxsQR7M0Xyu7vvvuOdn7gwqjAaNTk+eeIWXWG0w7CY4RrKnObWGuvXwmhCTf4nFEUuBZA0Ov7qjPbf",
	"nMhQgf/1f4trPuH/i1vwuNp1cUC7rM3w7XYb8QSdsLLwYHzCpyxFjVYKhv4os+3ZqLYRvDu1CIRTIUyp",
	"6RLvS3TBtcKaAi3JKgao9pcaFPo1bQrkE+7ISp3ybcRRgcwHdwpw7tHYZGBzG3GL96W0mPDJTd9IA9kB",
	"uN1GtbsXRkvy8R9wF3VSGKlpWdr8Zbu9095In9x99CaTfcbDLSZKR0bVpAuTIHOlyBg49i4EtJR6WTp8",
	"x6N9qhQ6BynuQ09ZZ81gZUpilGFlZR/peXz1qQb+dnfBrL6iIG/6DGma5zWv7gtscgPJfugJUJCmJFTu",
	"JY3WaB6+tgfWwqYSRdrVkdSEKdpmZxl0cGAf7fLwbTIEeXt9bawCqo78+ktL1O7GM6YCcMdGz50+elRx",
	"4eWy0EImdUX36RJBrckS+t4kQPgTyaDyPRHIIypFJjzqgnsvzk260AcTR+YO9cvA1bEd3OECe4VyH6zv",
	"RjOvQuULz8ABriMu64S6o6W+k8CA1qVbto4UHYMrY3IE7c/k4GgpMhR3PxTikCx6Qe9Z7wb3TEK+L6Ao",
	"raTNlQ+r4v0jgkU7LSnzq1VY/d649sff17zuJiGgsNu6mREVVW/Cb4RWQz4zwu0/b/6cm8RxKikrVyNh",
	"VLzOzaO4ixOzQqtA6/hyPp1dzEfKhxjSecytKplr07RdENRRL19Lq6Q2I5GBTkHL31K/4ZH4Xj+dNZjv",
	"HFuBuEPtPcmlwLpHVK2RXyyuf8TD+HxxOv90FQLz2kGr3Of1FdoHKfDIICNOknJ/uoVtXXxA66oQxqPx",
	"6MRbMQVqKCSf8Pej8eh9qEHKQmJiKCmL604cvhSmegB8MYZJZZHwSX9s4JUM0dFHk2xebcYZHE22fdGT",
	"LTF86AxcP49P9jV2ejmfXs9nVWLDQHbI/A4r7k1uoT5KpcBudvE7BkzjI4MdDwSp86UYCibUVMVoblKp",
	"D9N5HrbfhsbeS34UfePXtd00pYEp9Wpx9mk+Y399ea28nJuUBSYHEqHq6cYbSHEgC/0hKJSFBYWE/s7N",
	"E/cZ5Pcl2g2Pmnqv54SWDiW1VKXik5OhcWMYJJdKUh8FvtUo43H0fczbN8zf8Fg4kMjPf/7LDNadJ/Dc",
	"7Tk3tz7ANsFnSAzynDXJZFIzYI+SMlZAKnWIspP/XTb9dPG9t6yZPN7yLXv2v+W/fcuOZbxyvX7p1I6l",
	"AYIrWPvQ1EvbBSdxnBsBeWYcTT6MP4z59nb7TwAAAP//DvjY2DYPAAA=",
}

// GetSwagger returns the content of the embedded swagger specification file
// or error if failed to decode
func decodeSpec() ([]byte, error) {
	zipped, err := base64.StdEncoding.DecodeString(strings.Join(swaggerSpec, ""))
	if err != nil {
		return nil, fmt.Errorf("error base64 decoding spec: %s", err)
	}
	zr, err := gzip.NewReader(bytes.NewReader(zipped))
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}
	var buf bytes.Buffer
	_, err = buf.ReadFrom(zr)
	if err != nil {
		return nil, fmt.Errorf("error decompressing spec: %s", err)
	}

	return buf.Bytes(), nil
}

var rawSpec = decodeSpecCached()

// a naive cached of a decoded swagger spec
func decodeSpecCached() func() ([]byte, error) {
	data, err := decodeSpec()
	return func() ([]byte, error) {
		return data, err
	}
}

// Constructs a synthetic filesystem for resolving external references when loading openapi specifications.
func PathToRawSpec(pathToFile string) map[string]func() ([]byte, error) {
	var res = make(map[string]func() ([]byte, error))
	if len(pathToFile) > 0 {
		res[pathToFile] = rawSpec
	}

	return res
}

// GetSwagger returns the Swagger specification corresponding to the generated code
// in this file. The external references of Swagger specification are resolved.
// The logic of resolving external references is tightly connected to "import-mapping" feature.
// Externally referenced files must be embedded in the corresponding golang packages.
// Urls can be supported but this task was out of the scope.
func GetSwagger() (swagger *openapi3.T, err error) {
	var resolvePath = PathToRawSpec("")

	loader := openapi3.NewLoader()
	loader.IsExternalRefsAllowed = true
	loader.ReadFromURIFunc = func(loader *openapi3.Loader, url *url.URL) ([]byte, error) {
		var pathToFile = url.String()
		pathToFile = path.Clean(pathToFile)
		getSpec, ok := resolvePath[pathToFile]
		if !ok {
			err1 := fmt.Errorf("path not found: %s", pathToFile)
			return nil, err1
		}
		return getSpec()
	}
	var specData []byte
	specData, err = rawSpec()
	if err != nil {
		return
	}
	swagger, err = loader.LoadFromData(specData)
	if err != nil {
		return
	}
	return
}
