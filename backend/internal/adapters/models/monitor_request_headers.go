// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MonitorRequestHeader is an object representing the database table.
type MonitorRequestHeader struct {
	ID        string `boil:"id" json:"id" toml:"id" yaml:"id"`
	MonitorID string `boil:"monitor_id" json:"monitor_id" toml:"monitor_id" yaml:"monitor_id"`
	Name      string `boil:"name" json:"name" toml:"name" yaml:"name"`
	Value     string `boil:"value" json:"value" toml:"value" yaml:"value"`

	R *monitorRequestHeaderR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monitorRequestHeaderL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonitorRequestHeaderColumns = struct {
	ID        string
	MonitorID string
	Name      string
	Value     string
}{
	ID:        "id",
	MonitorID: "monitor_id",
	Name:      "name",
	Value:     "value",
}

var MonitorRequestHeaderTableColumns = struct {
	ID        string
	MonitorID string
	Name      string
	Value     string
}{
	ID:        "monitor_request_headers.id",
	MonitorID: "monitor_request_headers.monitor_id",
	Name:      "monitor_request_headers.name",
	Value:     "monitor_request_headers.value",
}

// Generated where

var MonitorRequestHeaderWhere = struct {
	ID        whereHelperstring
	MonitorID whereHelperstring
	Name      whereHelperstring
	Value     whereHelperstring
}{
	ID:        whereHelperstring{field: "\"monitor_request_headers\".\"id\""},
	MonitorID: whereHelperstring{field: "\"monitor_request_headers\".\"monitor_id\""},
	Name:      whereHelperstring{field: "\"monitor_request_headers\".\"name\""},
	Value:     whereHelperstring{field: "\"monitor_request_headers\".\"value\""},
}

// MonitorRequestHeaderRels is where relationship names are stored.
var MonitorRequestHeaderRels = struct {
	Monitor string
}{
	Monitor: "Monitor",
}

// monitorRequestHeaderR is where relationships are stored.
type monitorRequestHeaderR struct {
	Monitor *Monitor `boil:"Monitor" json:"Monitor" toml:"Monitor" yaml:"Monitor"`
}

// NewStruct creates a new relationship struct
func (*monitorRequestHeaderR) NewStruct() *monitorRequestHeaderR {
	return &monitorRequestHeaderR{}
}

func (r *monitorRequestHeaderR) GetMonitor() *Monitor {
	if r == nil {
		return nil
	}
	return r.Monitor
}

// monitorRequestHeaderL is where Load methods for each relationship are stored.
type monitorRequestHeaderL struct{}

var (
	monitorRequestHeaderAllColumns            = []string{"id", "monitor_id", "name", "value"}
	monitorRequestHeaderColumnsWithoutDefault = []string{"id", "monitor_id", "name", "value"}
	monitorRequestHeaderColumnsWithDefault    = []string{}
	monitorRequestHeaderPrimaryKeyColumns     = []string{"id"}
	monitorRequestHeaderGeneratedColumns      = []string{}
)

type (
	// MonitorRequestHeaderSlice is an alias for a slice of pointers to MonitorRequestHeader.
	// This should almost always be used instead of []MonitorRequestHeader.
	MonitorRequestHeaderSlice []*MonitorRequestHeader
	// MonitorRequestHeaderHook is the signature for custom MonitorRequestHeader hook methods
	MonitorRequestHeaderHook func(context.Context, boil.ContextExecutor, *MonitorRequestHeader) error

	monitorRequestHeaderQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monitorRequestHeaderType                 = reflect.TypeOf(&MonitorRequestHeader{})
	monitorRequestHeaderMapping              = queries.MakeStructMapping(monitorRequestHeaderType)
	monitorRequestHeaderPrimaryKeyMapping, _ = queries.BindMapping(monitorRequestHeaderType, monitorRequestHeaderMapping, monitorRequestHeaderPrimaryKeyColumns)
	monitorRequestHeaderInsertCacheMut       sync.RWMutex
	monitorRequestHeaderInsertCache          = make(map[string]insertCache)
	monitorRequestHeaderUpdateCacheMut       sync.RWMutex
	monitorRequestHeaderUpdateCache          = make(map[string]updateCache)
	monitorRequestHeaderUpsertCacheMut       sync.RWMutex
	monitorRequestHeaderUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monitorRequestHeaderAfterSelectHooks []MonitorRequestHeaderHook

var monitorRequestHeaderBeforeInsertHooks []MonitorRequestHeaderHook
var monitorRequestHeaderAfterInsertHooks []MonitorRequestHeaderHook

var monitorRequestHeaderBeforeUpdateHooks []MonitorRequestHeaderHook
var monitorRequestHeaderAfterUpdateHooks []MonitorRequestHeaderHook

var monitorRequestHeaderBeforeDeleteHooks []MonitorRequestHeaderHook
var monitorRequestHeaderAfterDeleteHooks []MonitorRequestHeaderHook

var monitorRequestHeaderBeforeUpsertHooks []MonitorRequestHeaderHook
var monitorRequestHeaderAfterUpsertHooks []MonitorRequestHeaderHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonitorRequestHeader) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonitorRequestHeader) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonitorRequestHeader) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonitorRequestHeader) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonitorRequestHeader) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonitorRequestHeader) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonitorRequestHeader) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonitorRequestHeader) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonitorRequestHeader) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorRequestHeaderAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonitorRequestHeaderHook registers your hook function for all future operations.
func AddMonitorRequestHeaderHook(hookPoint boil.HookPoint, monitorRequestHeaderHook MonitorRequestHeaderHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monitorRequestHeaderAfterSelectHooks = append(monitorRequestHeaderAfterSelectHooks, monitorRequestHeaderHook)
	case boil.BeforeInsertHook:
		monitorRequestHeaderBeforeInsertHooks = append(monitorRequestHeaderBeforeInsertHooks, monitorRequestHeaderHook)
	case boil.AfterInsertHook:
		monitorRequestHeaderAfterInsertHooks = append(monitorRequestHeaderAfterInsertHooks, monitorRequestHeaderHook)
	case boil.BeforeUpdateHook:
		monitorRequestHeaderBeforeUpdateHooks = append(monitorRequestHeaderBeforeUpdateHooks, monitorRequestHeaderHook)
	case boil.AfterUpdateHook:
		monitorRequestHeaderAfterUpdateHooks = append(monitorRequestHeaderAfterUpdateHooks, monitorRequestHeaderHook)
	case boil.BeforeDeleteHook:
		monitorRequestHeaderBeforeDeleteHooks = append(monitorRequestHeaderBeforeDeleteHooks, monitorRequestHeaderHook)
	case boil.AfterDeleteHook:
		monitorRequestHeaderAfterDeleteHooks = append(monitorRequestHeaderAfterDeleteHooks, monitorRequestHeaderHook)
	case boil.BeforeUpsertHook:
		monitorRequestHeaderBeforeUpsertHooks = append(monitorRequestHeaderBeforeUpsertHooks, monitorRequestHeaderHook)
	case boil.AfterUpsertHook:
		monitorRequestHeaderAfterUpsertHooks = append(monitorRequestHeaderAfterUpsertHooks, monitorRequestHeaderHook)
	}
}

// One returns a single monitorRequestHeader record from the query.
func (q monitorRequestHeaderQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonitorRequestHeader, error) {
	o := &MonitorRequestHeader{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monitor_request_headers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MonitorRequestHeader records from the query.
func (q monitorRequestHeaderQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonitorRequestHeaderSlice, error) {
	var o []*MonitorRequestHeader

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonitorRequestHeader slice")
	}

	if len(monitorRequestHeaderAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MonitorRequestHeader records in the query.
func (q monitorRequestHeaderQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monitor_request_headers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q monitorRequestHeaderQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monitor_request_headers exists")
	}

	return count > 0, nil
}

// Monitor pointed to by the foreign key.
func (o *MonitorRequestHeader) Monitor(mods ...qm.QueryMod) monitorQuery {
	queryMods := []qm.QueryMod{
		qm.Where("\"id\" = ?", o.MonitorID),
	}

	queryMods = append(queryMods, mods...)

	return Monitors(queryMods...)
}

// LoadMonitor allows an eager lookup of values, cached into the
// loaded structs of the objects. This is for an N-1 relationship.
func (monitorRequestHeaderL) LoadMonitor(ctx context.Context, e boil.ContextExecutor, singular bool, maybeMonitorRequestHeader interface{}, mods queries.Applicator) error {
	var slice []*MonitorRequestHeader
	var object *MonitorRequestHeader

	if singular {
		var ok bool
		object, ok = maybeMonitorRequestHeader.(*MonitorRequestHeader)
		if !ok {
			object = new(MonitorRequestHeader)
			ok = queries.SetFromEmbeddedStruct(&object, &maybeMonitorRequestHeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", object, maybeMonitorRequestHeader))
			}
		}
	} else {
		s, ok := maybeMonitorRequestHeader.(*[]*MonitorRequestHeader)
		if ok {
			slice = *s
		} else {
			ok = queries.SetFromEmbeddedStruct(&slice, maybeMonitorRequestHeader)
			if !ok {
				return errors.New(fmt.Sprintf("failed to set %T from embedded struct %T", slice, maybeMonitorRequestHeader))
			}
		}
	}

	args := make([]interface{}, 0, 1)
	if singular {
		if object.R == nil {
			object.R = &monitorRequestHeaderR{}
		}
		args = append(args, object.MonitorID)

	} else {
	Outer:
		for _, obj := range slice {
			if obj.R == nil {
				obj.R = &monitorRequestHeaderR{}
			}

			for _, a := range args {
				if a == obj.MonitorID {
					continue Outer
				}
			}

			args = append(args, obj.MonitorID)

		}
	}

	if len(args) == 0 {
		return nil
	}

	query := NewQuery(
		qm.From(`monitors`),
		qm.WhereIn(`monitors.id in ?`, args...),
	)
	if mods != nil {
		mods.Apply(query)
	}

	results, err := query.QueryContext(ctx, e)
	if err != nil {
		return errors.Wrap(err, "failed to eager load Monitor")
	}

	var resultSlice []*Monitor
	if err = queries.Bind(results, &resultSlice); err != nil {
		return errors.Wrap(err, "failed to bind eager loaded slice Monitor")
	}

	if err = results.Close(); err != nil {
		return errors.Wrap(err, "failed to close results of eager load for monitors")
	}
	if err = results.Err(); err != nil {
		return errors.Wrap(err, "error occurred during iteration of eager loaded relations for monitors")
	}

	if len(monitorAfterSelectHooks) != 0 {
		for _, obj := range resultSlice {
			if err := obj.doAfterSelectHooks(ctx, e); err != nil {
				return err
			}
		}
	}

	if len(resultSlice) == 0 {
		return nil
	}

	if singular {
		foreign := resultSlice[0]
		object.R.Monitor = foreign
		if foreign.R == nil {
			foreign.R = &monitorR{}
		}
		foreign.R.MonitorRequestHeaders = append(foreign.R.MonitorRequestHeaders, object)
		return nil
	}

	for _, local := range slice {
		for _, foreign := range resultSlice {
			if local.MonitorID == foreign.ID {
				local.R.Monitor = foreign
				if foreign.R == nil {
					foreign.R = &monitorR{}
				}
				foreign.R.MonitorRequestHeaders = append(foreign.R.MonitorRequestHeaders, local)
				break
			}
		}
	}

	return nil
}

// SetMonitor of the monitorRequestHeader to the related item.
// Sets o.R.Monitor to related.
// Adds o to related.R.MonitorRequestHeaders.
func (o *MonitorRequestHeader) SetMonitor(ctx context.Context, exec boil.ContextExecutor, insert bool, related *Monitor) error {
	var err error
	if insert {
		if err = related.Insert(ctx, exec, boil.Infer()); err != nil {
			return errors.Wrap(err, "failed to insert into foreign table")
		}
	}

	updateQuery := fmt.Sprintf(
		"UPDATE \"monitor_request_headers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, []string{"monitor_id"}),
		strmangle.WhereClause("\"", "\"", 2, monitorRequestHeaderPrimaryKeyColumns),
	)
	values := []interface{}{related.ID, o.ID}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, updateQuery)
		fmt.Fprintln(writer, values)
	}
	if _, err = exec.ExecContext(ctx, updateQuery, values...); err != nil {
		return errors.Wrap(err, "failed to update local table")
	}

	o.MonitorID = related.ID
	if o.R == nil {
		o.R = &monitorRequestHeaderR{
			Monitor: related,
		}
	} else {
		o.R.Monitor = related
	}

	if related.R == nil {
		related.R = &monitorR{
			MonitorRequestHeaders: MonitorRequestHeaderSlice{o},
		}
	} else {
		related.R.MonitorRequestHeaders = append(related.R.MonitorRequestHeaders, o)
	}

	return nil
}

// MonitorRequestHeaders retrieves all the records using an executor.
func MonitorRequestHeaders(mods ...qm.QueryMod) monitorRequestHeaderQuery {
	mods = append(mods, qm.From("\"monitor_request_headers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monitor_request_headers\".*"})
	}

	return monitorRequestHeaderQuery{q}
}

// FindMonitorRequestHeader retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonitorRequestHeader(ctx context.Context, exec boil.ContextExecutor, iD string, selectCols ...string) (*MonitorRequestHeader, error) {
	monitorRequestHeaderObj := &MonitorRequestHeader{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monitor_request_headers\" where \"id\"=$1", sel,
	)

	q := queries.Raw(query, iD)

	err := q.Bind(ctx, exec, monitorRequestHeaderObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monitor_request_headers")
	}

	if err = monitorRequestHeaderObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monitorRequestHeaderObj, err
	}

	return monitorRequestHeaderObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonitorRequestHeader) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitor_request_headers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitorRequestHeaderColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monitorRequestHeaderInsertCacheMut.RLock()
	cache, cached := monitorRequestHeaderInsertCache[key]
	monitorRequestHeaderInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monitorRequestHeaderAllColumns,
			monitorRequestHeaderColumnsWithDefault,
			monitorRequestHeaderColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monitorRequestHeaderType, monitorRequestHeaderMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monitorRequestHeaderType, monitorRequestHeaderMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monitor_request_headers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monitor_request_headers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monitor_request_headers")
	}

	if !cached {
		monitorRequestHeaderInsertCacheMut.Lock()
		monitorRequestHeaderInsertCache[key] = cache
		monitorRequestHeaderInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MonitorRequestHeader.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonitorRequestHeader) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monitorRequestHeaderUpdateCacheMut.RLock()
	cache, cached := monitorRequestHeaderUpdateCache[key]
	monitorRequestHeaderUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monitorRequestHeaderAllColumns,
			monitorRequestHeaderPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monitor_request_headers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monitor_request_headers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monitorRequestHeaderPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monitorRequestHeaderType, monitorRequestHeaderMapping, append(wl, monitorRequestHeaderPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monitor_request_headers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monitor_request_headers")
	}

	if !cached {
		monitorRequestHeaderUpdateCacheMut.Lock()
		monitorRequestHeaderUpdateCache[key] = cache
		monitorRequestHeaderUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q monitorRequestHeaderQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monitor_request_headers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monitor_request_headers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonitorRequestHeaderSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorRequestHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monitor_request_headers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monitorRequestHeaderPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monitorRequestHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monitorRequestHeader")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonitorRequestHeader) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitor_request_headers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitorRequestHeaderColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monitorRequestHeaderUpsertCacheMut.RLock()
	cache, cached := monitorRequestHeaderUpsertCache[key]
	monitorRequestHeaderUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monitorRequestHeaderAllColumns,
			monitorRequestHeaderColumnsWithDefault,
			monitorRequestHeaderColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monitorRequestHeaderAllColumns,
			monitorRequestHeaderPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monitor_request_headers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monitorRequestHeaderPrimaryKeyColumns))
			copy(conflict, monitorRequestHeaderPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monitor_request_headers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monitorRequestHeaderType, monitorRequestHeaderMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monitorRequestHeaderType, monitorRequestHeaderMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monitor_request_headers")
	}

	if !cached {
		monitorRequestHeaderUpsertCacheMut.Lock()
		monitorRequestHeaderUpsertCache[key] = cache
		monitorRequestHeaderUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MonitorRequestHeader record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonitorRequestHeader) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonitorRequestHeader provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monitorRequestHeaderPrimaryKeyMapping)
	sql := "DELETE FROM \"monitor_request_headers\" WHERE \"id\"=$1"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monitor_request_headers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monitor_request_headers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q monitorRequestHeaderQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monitorRequestHeaderQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitor_request_headers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitor_request_headers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonitorRequestHeaderSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monitorRequestHeaderBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorRequestHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monitor_request_headers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitorRequestHeaderPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitorRequestHeader slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitor_request_headers")
	}

	if len(monitorRequestHeaderAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonitorRequestHeader) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonitorRequestHeader(ctx, exec, o.ID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonitorRequestHeaderSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonitorRequestHeaderSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorRequestHeaderPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monitor_request_headers\".* FROM \"monitor_request_headers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitorRequestHeaderPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonitorRequestHeaderSlice")
	}

	*o = slice

	return nil
}

// MonitorRequestHeaderExists checks if the MonitorRequestHeader row exists.
func MonitorRequestHeaderExists(ctx context.Context, exec boil.ContextExecutor, iD string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monitor_request_headers\" where \"id\"=$1 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, iD)
	}
	row := exec.QueryRowContext(ctx, sql, iD)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monitor_request_headers exists")
	}

	return exists, nil
}

// Exists checks if the MonitorRequestHeader row exists.
func (o *MonitorRequestHeader) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonitorRequestHeaderExists(ctx, exec, o.ID)
}
