// Code generated by SQLBoiler 4.14.2 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"context"
	"database/sql"
	"fmt"
	"reflect"
	"strconv"
	"strings"
	"sync"
	"time"

	"github.com/friendsofgo/errors"
	"github.com/volatiletech/sqlboiler/v4/boil"
	"github.com/volatiletech/sqlboiler/v4/queries"
	"github.com/volatiletech/sqlboiler/v4/queries/qm"
	"github.com/volatiletech/sqlboiler/v4/queries/qmhelper"
	"github.com/volatiletech/strmangle"
)

// MonitorAlertTrigger is an object representing the database table.
type MonitorAlertTrigger struct {
	MonitorID string `boil:"monitor_id" json:"monitor_id" toml:"monitor_id" yaml:"monitor_id"`
	TriggerID string `boil:"trigger_id" json:"trigger_id" toml:"trigger_id" yaml:"trigger_id"`

	R *monitorAlertTriggerR `boil:"-" json:"-" toml:"-" yaml:"-"`
	L monitorAlertTriggerL  `boil:"-" json:"-" toml:"-" yaml:"-"`
}

var MonitorAlertTriggerColumns = struct {
	MonitorID string
	TriggerID string
}{
	MonitorID: "monitor_id",
	TriggerID: "trigger_id",
}

var MonitorAlertTriggerTableColumns = struct {
	MonitorID string
	TriggerID string
}{
	MonitorID: "monitor_alert_triggers.monitor_id",
	TriggerID: "monitor_alert_triggers.trigger_id",
}

// Generated where

var MonitorAlertTriggerWhere = struct {
	MonitorID whereHelperstring
	TriggerID whereHelperstring
}{
	MonitorID: whereHelperstring{field: "\"monitor_alert_triggers\".\"monitor_id\""},
	TriggerID: whereHelperstring{field: "\"monitor_alert_triggers\".\"trigger_id\""},
}

// MonitorAlertTriggerRels is where relationship names are stored.
var MonitorAlertTriggerRels = struct {
}{}

// monitorAlertTriggerR is where relationships are stored.
type monitorAlertTriggerR struct {
}

// NewStruct creates a new relationship struct
func (*monitorAlertTriggerR) NewStruct() *monitorAlertTriggerR {
	return &monitorAlertTriggerR{}
}

// monitorAlertTriggerL is where Load methods for each relationship are stored.
type monitorAlertTriggerL struct{}

var (
	monitorAlertTriggerAllColumns            = []string{"monitor_id", "trigger_id"}
	monitorAlertTriggerColumnsWithoutDefault = []string{"monitor_id", "trigger_id"}
	monitorAlertTriggerColumnsWithDefault    = []string{}
	monitorAlertTriggerPrimaryKeyColumns     = []string{"monitor_id", "trigger_id"}
	monitorAlertTriggerGeneratedColumns      = []string{}
)

type (
	// MonitorAlertTriggerSlice is an alias for a slice of pointers to MonitorAlertTrigger.
	// This should almost always be used instead of []MonitorAlertTrigger.
	MonitorAlertTriggerSlice []*MonitorAlertTrigger
	// MonitorAlertTriggerHook is the signature for custom MonitorAlertTrigger hook methods
	MonitorAlertTriggerHook func(context.Context, boil.ContextExecutor, *MonitorAlertTrigger) error

	monitorAlertTriggerQuery struct {
		*queries.Query
	}
)

// Cache for insert, update and upsert
var (
	monitorAlertTriggerType                 = reflect.TypeOf(&MonitorAlertTrigger{})
	monitorAlertTriggerMapping              = queries.MakeStructMapping(monitorAlertTriggerType)
	monitorAlertTriggerPrimaryKeyMapping, _ = queries.BindMapping(monitorAlertTriggerType, monitorAlertTriggerMapping, monitorAlertTriggerPrimaryKeyColumns)
	monitorAlertTriggerInsertCacheMut       sync.RWMutex
	monitorAlertTriggerInsertCache          = make(map[string]insertCache)
	monitorAlertTriggerUpdateCacheMut       sync.RWMutex
	monitorAlertTriggerUpdateCache          = make(map[string]updateCache)
	monitorAlertTriggerUpsertCacheMut       sync.RWMutex
	monitorAlertTriggerUpsertCache          = make(map[string]insertCache)
)

var (
	// Force time package dependency for automated UpdatedAt/CreatedAt.
	_ = time.Second
	// Force qmhelper dependency for where clause generation (which doesn't
	// always happen)
	_ = qmhelper.Where
)

var monitorAlertTriggerAfterSelectHooks []MonitorAlertTriggerHook

var monitorAlertTriggerBeforeInsertHooks []MonitorAlertTriggerHook
var monitorAlertTriggerAfterInsertHooks []MonitorAlertTriggerHook

var monitorAlertTriggerBeforeUpdateHooks []MonitorAlertTriggerHook
var monitorAlertTriggerAfterUpdateHooks []MonitorAlertTriggerHook

var monitorAlertTriggerBeforeDeleteHooks []MonitorAlertTriggerHook
var monitorAlertTriggerAfterDeleteHooks []MonitorAlertTriggerHook

var monitorAlertTriggerBeforeUpsertHooks []MonitorAlertTriggerHook
var monitorAlertTriggerAfterUpsertHooks []MonitorAlertTriggerHook

// doAfterSelectHooks executes all "after Select" hooks.
func (o *MonitorAlertTrigger) doAfterSelectHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerAfterSelectHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeInsertHooks executes all "before insert" hooks.
func (o *MonitorAlertTrigger) doBeforeInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerBeforeInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterInsertHooks executes all "after Insert" hooks.
func (o *MonitorAlertTrigger) doAfterInsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerAfterInsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpdateHooks executes all "before Update" hooks.
func (o *MonitorAlertTrigger) doBeforeUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerBeforeUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpdateHooks executes all "after Update" hooks.
func (o *MonitorAlertTrigger) doAfterUpdateHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerAfterUpdateHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeDeleteHooks executes all "before Delete" hooks.
func (o *MonitorAlertTrigger) doBeforeDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerBeforeDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterDeleteHooks executes all "after Delete" hooks.
func (o *MonitorAlertTrigger) doAfterDeleteHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerAfterDeleteHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doBeforeUpsertHooks executes all "before Upsert" hooks.
func (o *MonitorAlertTrigger) doBeforeUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerBeforeUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// doAfterUpsertHooks executes all "after Upsert" hooks.
func (o *MonitorAlertTrigger) doAfterUpsertHooks(ctx context.Context, exec boil.ContextExecutor) (err error) {
	if boil.HooksAreSkipped(ctx) {
		return nil
	}

	for _, hook := range monitorAlertTriggerAfterUpsertHooks {
		if err := hook(ctx, exec, o); err != nil {
			return err
		}
	}

	return nil
}

// AddMonitorAlertTriggerHook registers your hook function for all future operations.
func AddMonitorAlertTriggerHook(hookPoint boil.HookPoint, monitorAlertTriggerHook MonitorAlertTriggerHook) {
	switch hookPoint {
	case boil.AfterSelectHook:
		monitorAlertTriggerAfterSelectHooks = append(monitorAlertTriggerAfterSelectHooks, monitorAlertTriggerHook)
	case boil.BeforeInsertHook:
		monitorAlertTriggerBeforeInsertHooks = append(monitorAlertTriggerBeforeInsertHooks, monitorAlertTriggerHook)
	case boil.AfterInsertHook:
		monitorAlertTriggerAfterInsertHooks = append(monitorAlertTriggerAfterInsertHooks, monitorAlertTriggerHook)
	case boil.BeforeUpdateHook:
		monitorAlertTriggerBeforeUpdateHooks = append(monitorAlertTriggerBeforeUpdateHooks, monitorAlertTriggerHook)
	case boil.AfterUpdateHook:
		monitorAlertTriggerAfterUpdateHooks = append(monitorAlertTriggerAfterUpdateHooks, monitorAlertTriggerHook)
	case boil.BeforeDeleteHook:
		monitorAlertTriggerBeforeDeleteHooks = append(monitorAlertTriggerBeforeDeleteHooks, monitorAlertTriggerHook)
	case boil.AfterDeleteHook:
		monitorAlertTriggerAfterDeleteHooks = append(monitorAlertTriggerAfterDeleteHooks, monitorAlertTriggerHook)
	case boil.BeforeUpsertHook:
		monitorAlertTriggerBeforeUpsertHooks = append(monitorAlertTriggerBeforeUpsertHooks, monitorAlertTriggerHook)
	case boil.AfterUpsertHook:
		monitorAlertTriggerAfterUpsertHooks = append(monitorAlertTriggerAfterUpsertHooks, monitorAlertTriggerHook)
	}
}

// One returns a single monitorAlertTrigger record from the query.
func (q monitorAlertTriggerQuery) One(ctx context.Context, exec boil.ContextExecutor) (*MonitorAlertTrigger, error) {
	o := &MonitorAlertTrigger{}

	queries.SetLimit(q.Query, 1)

	err := q.Bind(ctx, exec, o)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: failed to execute a one query for monitor_alert_triggers")
	}

	if err := o.doAfterSelectHooks(ctx, exec); err != nil {
		return o, err
	}

	return o, nil
}

// All returns all MonitorAlertTrigger records from the query.
func (q monitorAlertTriggerQuery) All(ctx context.Context, exec boil.ContextExecutor) (MonitorAlertTriggerSlice, error) {
	var o []*MonitorAlertTrigger

	err := q.Bind(ctx, exec, &o)
	if err != nil {
		return nil, errors.Wrap(err, "models: failed to assign all query results to MonitorAlertTrigger slice")
	}

	if len(monitorAlertTriggerAfterSelectHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterSelectHooks(ctx, exec); err != nil {
				return o, err
			}
		}
	}

	return o, nil
}

// Count returns the count of all MonitorAlertTrigger records in the query.
func (q monitorAlertTriggerQuery) Count(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to count monitor_alert_triggers rows")
	}

	return count, nil
}

// Exists checks if the row exists in the table.
func (q monitorAlertTriggerQuery) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	var count int64

	queries.SetSelect(q.Query, nil)
	queries.SetCount(q.Query)
	queries.SetLimit(q.Query, 1)

	err := q.Query.QueryRowContext(ctx, exec).Scan(&count)
	if err != nil {
		return false, errors.Wrap(err, "models: failed to check if monitor_alert_triggers exists")
	}

	return count > 0, nil
}

// MonitorAlertTriggers retrieves all the records using an executor.
func MonitorAlertTriggers(mods ...qm.QueryMod) monitorAlertTriggerQuery {
	mods = append(mods, qm.From("\"monitor_alert_triggers\""))
	q := NewQuery(mods...)
	if len(queries.GetSelect(q)) == 0 {
		queries.SetSelect(q, []string{"\"monitor_alert_triggers\".*"})
	}

	return monitorAlertTriggerQuery{q}
}

// FindMonitorAlertTrigger retrieves a single record by ID with an executor.
// If selectCols is empty Find will return all columns.
func FindMonitorAlertTrigger(ctx context.Context, exec boil.ContextExecutor, monitorID string, triggerID string, selectCols ...string) (*MonitorAlertTrigger, error) {
	monitorAlertTriggerObj := &MonitorAlertTrigger{}

	sel := "*"
	if len(selectCols) > 0 {
		sel = strings.Join(strmangle.IdentQuoteSlice(dialect.LQ, dialect.RQ, selectCols), ",")
	}
	query := fmt.Sprintf(
		"select %s from \"monitor_alert_triggers\" where \"monitor_id\"=$1 AND \"trigger_id\"=$2", sel,
	)

	q := queries.Raw(query, monitorID, triggerID)

	err := q.Bind(ctx, exec, monitorAlertTriggerObj)
	if err != nil {
		if errors.Is(err, sql.ErrNoRows) {
			return nil, sql.ErrNoRows
		}
		return nil, errors.Wrap(err, "models: unable to select from monitor_alert_triggers")
	}

	if err = monitorAlertTriggerObj.doAfterSelectHooks(ctx, exec); err != nil {
		return monitorAlertTriggerObj, err
	}

	return monitorAlertTriggerObj, nil
}

// Insert a single record using an executor.
// See boil.Columns.InsertColumnSet documentation to understand column list inference for inserts.
func (o *MonitorAlertTrigger) Insert(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitor_alert_triggers provided for insertion")
	}

	var err error

	if err := o.doBeforeInsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitorAlertTriggerColumnsWithDefault, o)

	key := makeCacheKey(columns, nzDefaults)
	monitorAlertTriggerInsertCacheMut.RLock()
	cache, cached := monitorAlertTriggerInsertCache[key]
	monitorAlertTriggerInsertCacheMut.RUnlock()

	if !cached {
		wl, returnColumns := columns.InsertColumnSet(
			monitorAlertTriggerAllColumns,
			monitorAlertTriggerColumnsWithDefault,
			monitorAlertTriggerColumnsWithoutDefault,
			nzDefaults,
		)

		cache.valueMapping, err = queries.BindMapping(monitorAlertTriggerType, monitorAlertTriggerMapping, wl)
		if err != nil {
			return err
		}
		cache.retMapping, err = queries.BindMapping(monitorAlertTriggerType, monitorAlertTriggerMapping, returnColumns)
		if err != nil {
			return err
		}
		if len(wl) != 0 {
			cache.query = fmt.Sprintf("INSERT INTO \"monitor_alert_triggers\" (\"%s\") %%sVALUES (%s)%%s", strings.Join(wl, "\",\""), strmangle.Placeholders(dialect.UseIndexPlaceholders, len(wl), 1, 1))
		} else {
			cache.query = "INSERT INTO \"monitor_alert_triggers\" %sDEFAULT VALUES%s"
		}

		var queryOutput, queryReturning string

		if len(cache.retMapping) != 0 {
			queryReturning = fmt.Sprintf(" RETURNING \"%s\"", strings.Join(returnColumns, "\",\""))
		}

		cache.query = fmt.Sprintf(cache.query, queryOutput, queryReturning)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}

	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(queries.PtrsFromMapping(value, cache.retMapping)...)
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}

	if err != nil {
		return errors.Wrap(err, "models: unable to insert into monitor_alert_triggers")
	}

	if !cached {
		monitorAlertTriggerInsertCacheMut.Lock()
		monitorAlertTriggerInsertCache[key] = cache
		monitorAlertTriggerInsertCacheMut.Unlock()
	}

	return o.doAfterInsertHooks(ctx, exec)
}

// Update uses an executor to update the MonitorAlertTrigger.
// See boil.Columns.UpdateColumnSet documentation to understand column list inference for updates.
// Update does not automatically update the record in case of default values. Use .Reload() to refresh the records.
func (o *MonitorAlertTrigger) Update(ctx context.Context, exec boil.ContextExecutor, columns boil.Columns) (int64, error) {
	var err error
	if err = o.doBeforeUpdateHooks(ctx, exec); err != nil {
		return 0, err
	}
	key := makeCacheKey(columns, nil)
	monitorAlertTriggerUpdateCacheMut.RLock()
	cache, cached := monitorAlertTriggerUpdateCache[key]
	monitorAlertTriggerUpdateCacheMut.RUnlock()

	if !cached {
		wl := columns.UpdateColumnSet(
			monitorAlertTriggerAllColumns,
			monitorAlertTriggerPrimaryKeyColumns,
		)

		if !columns.IsWhitelist() {
			wl = strmangle.SetComplement(wl, []string{"created_at"})
		}
		if len(wl) == 0 {
			return 0, errors.New("models: unable to update monitor_alert_triggers, could not build whitelist")
		}

		cache.query = fmt.Sprintf("UPDATE \"monitor_alert_triggers\" SET %s WHERE %s",
			strmangle.SetParamNames("\"", "\"", 1, wl),
			strmangle.WhereClause("\"", "\"", len(wl)+1, monitorAlertTriggerPrimaryKeyColumns),
		)
		cache.valueMapping, err = queries.BindMapping(monitorAlertTriggerType, monitorAlertTriggerMapping, append(wl, monitorAlertTriggerPrimaryKeyColumns...))
		if err != nil {
			return 0, err
		}
	}

	values := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), cache.valueMapping)

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, values)
	}
	var result sql.Result
	result, err = exec.ExecContext(ctx, cache.query, values...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update monitor_alert_triggers row")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by update for monitor_alert_triggers")
	}

	if !cached {
		monitorAlertTriggerUpdateCacheMut.Lock()
		monitorAlertTriggerUpdateCache[key] = cache
		monitorAlertTriggerUpdateCacheMut.Unlock()
	}

	return rowsAff, o.doAfterUpdateHooks(ctx, exec)
}

// UpdateAll updates all rows with the specified column values.
func (q monitorAlertTriggerQuery) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	queries.SetUpdate(q.Query, cols)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all for monitor_alert_triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected for monitor_alert_triggers")
	}

	return rowsAff, nil
}

// UpdateAll updates all rows with the specified column values, using an executor.
func (o MonitorAlertTriggerSlice) UpdateAll(ctx context.Context, exec boil.ContextExecutor, cols M) (int64, error) {
	ln := int64(len(o))
	if ln == 0 {
		return 0, nil
	}

	if len(cols) == 0 {
		return 0, errors.New("models: update all requires at least one column argument")
	}

	colNames := make([]string, len(cols))
	args := make([]interface{}, len(cols))

	i := 0
	for name, value := range cols {
		colNames[i] = name
		args[i] = value
		i++
	}

	// Append all of the primary key values for each column
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorAlertTriggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := fmt.Sprintf("UPDATE \"monitor_alert_triggers\" SET %s WHERE %s",
		strmangle.SetParamNames("\"", "\"", 1, colNames),
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), len(colNames)+1, monitorAlertTriggerPrimaryKeyColumns, len(o)))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to update all in monitorAlertTrigger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to retrieve rows affected all in update all monitorAlertTrigger")
	}
	return rowsAff, nil
}

// Upsert attempts an insert using an executor, and does an update or ignore on conflict.
// See boil.Columns documentation for how to properly use updateColumns and insertColumns.
func (o *MonitorAlertTrigger) Upsert(ctx context.Context, exec boil.ContextExecutor, updateOnConflict bool, conflictColumns []string, updateColumns, insertColumns boil.Columns) error {
	if o == nil {
		return errors.New("models: no monitor_alert_triggers provided for upsert")
	}

	if err := o.doBeforeUpsertHooks(ctx, exec); err != nil {
		return err
	}

	nzDefaults := queries.NonZeroDefaultSet(monitorAlertTriggerColumnsWithDefault, o)

	// Build cache key in-line uglily - mysql vs psql problems
	buf := strmangle.GetBuffer()
	if updateOnConflict {
		buf.WriteByte('t')
	} else {
		buf.WriteByte('f')
	}
	buf.WriteByte('.')
	for _, c := range conflictColumns {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(updateColumns.Kind))
	for _, c := range updateColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	buf.WriteString(strconv.Itoa(insertColumns.Kind))
	for _, c := range insertColumns.Cols {
		buf.WriteString(c)
	}
	buf.WriteByte('.')
	for _, c := range nzDefaults {
		buf.WriteString(c)
	}
	key := buf.String()
	strmangle.PutBuffer(buf)

	monitorAlertTriggerUpsertCacheMut.RLock()
	cache, cached := monitorAlertTriggerUpsertCache[key]
	monitorAlertTriggerUpsertCacheMut.RUnlock()

	var err error

	if !cached {
		insert, ret := insertColumns.InsertColumnSet(
			monitorAlertTriggerAllColumns,
			monitorAlertTriggerColumnsWithDefault,
			monitorAlertTriggerColumnsWithoutDefault,
			nzDefaults,
		)

		update := updateColumns.UpdateColumnSet(
			monitorAlertTriggerAllColumns,
			monitorAlertTriggerPrimaryKeyColumns,
		)

		if updateOnConflict && len(update) == 0 {
			return errors.New("models: unable to upsert monitor_alert_triggers, could not build update column list")
		}

		conflict := conflictColumns
		if len(conflict) == 0 {
			conflict = make([]string, len(monitorAlertTriggerPrimaryKeyColumns))
			copy(conflict, monitorAlertTriggerPrimaryKeyColumns)
		}
		cache.query = buildUpsertQueryPostgres(dialect, "\"monitor_alert_triggers\"", updateOnConflict, ret, update, conflict, insert)

		cache.valueMapping, err = queries.BindMapping(monitorAlertTriggerType, monitorAlertTriggerMapping, insert)
		if err != nil {
			return err
		}
		if len(ret) != 0 {
			cache.retMapping, err = queries.BindMapping(monitorAlertTriggerType, monitorAlertTriggerMapping, ret)
			if err != nil {
				return err
			}
		}
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	vals := queries.ValuesFromMapping(value, cache.valueMapping)
	var returns []interface{}
	if len(cache.retMapping) != 0 {
		returns = queries.PtrsFromMapping(value, cache.retMapping)
	}

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, cache.query)
		fmt.Fprintln(writer, vals)
	}
	if len(cache.retMapping) != 0 {
		err = exec.QueryRowContext(ctx, cache.query, vals...).Scan(returns...)
		if errors.Is(err, sql.ErrNoRows) {
			err = nil // Postgres doesn't return anything when there's no update
		}
	} else {
		_, err = exec.ExecContext(ctx, cache.query, vals...)
	}
	if err != nil {
		return errors.Wrap(err, "models: unable to upsert monitor_alert_triggers")
	}

	if !cached {
		monitorAlertTriggerUpsertCacheMut.Lock()
		monitorAlertTriggerUpsertCache[key] = cache
		monitorAlertTriggerUpsertCacheMut.Unlock()
	}

	return o.doAfterUpsertHooks(ctx, exec)
}

// Delete deletes a single MonitorAlertTrigger record with an executor.
// Delete will match against the primary key column to find the record to delete.
func (o *MonitorAlertTrigger) Delete(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if o == nil {
		return 0, errors.New("models: no MonitorAlertTrigger provided for delete")
	}

	if err := o.doBeforeDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	args := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(o)), monitorAlertTriggerPrimaryKeyMapping)
	sql := "DELETE FROM \"monitor_alert_triggers\" WHERE \"monitor_id\"=$1 AND \"trigger_id\"=$2"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args...)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete from monitor_alert_triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by delete for monitor_alert_triggers")
	}

	if err := o.doAfterDeleteHooks(ctx, exec); err != nil {
		return 0, err
	}

	return rowsAff, nil
}

// DeleteAll deletes all matching rows.
func (q monitorAlertTriggerQuery) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if q.Query == nil {
		return 0, errors.New("models: no monitorAlertTriggerQuery provided for delete all")
	}

	queries.SetDelete(q.Query)

	result, err := q.Query.ExecContext(ctx, exec)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitor_alert_triggers")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitor_alert_triggers")
	}

	return rowsAff, nil
}

// DeleteAll deletes all rows in the slice, using an executor.
func (o MonitorAlertTriggerSlice) DeleteAll(ctx context.Context, exec boil.ContextExecutor) (int64, error) {
	if len(o) == 0 {
		return 0, nil
	}

	if len(monitorAlertTriggerBeforeDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doBeforeDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	var args []interface{}
	for _, obj := range o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorAlertTriggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "DELETE FROM \"monitor_alert_triggers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitorAlertTriggerPrimaryKeyColumns, len(o))

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, args)
	}
	result, err := exec.ExecContext(ctx, sql, args...)
	if err != nil {
		return 0, errors.Wrap(err, "models: unable to delete all from monitorAlertTrigger slice")
	}

	rowsAff, err := result.RowsAffected()
	if err != nil {
		return 0, errors.Wrap(err, "models: failed to get rows affected by deleteall for monitor_alert_triggers")
	}

	if len(monitorAlertTriggerAfterDeleteHooks) != 0 {
		for _, obj := range o {
			if err := obj.doAfterDeleteHooks(ctx, exec); err != nil {
				return 0, err
			}
		}
	}

	return rowsAff, nil
}

// Reload refetches the object from the database
// using the primary keys with an executor.
func (o *MonitorAlertTrigger) Reload(ctx context.Context, exec boil.ContextExecutor) error {
	ret, err := FindMonitorAlertTrigger(ctx, exec, o.MonitorID, o.TriggerID)
	if err != nil {
		return err
	}

	*o = *ret
	return nil
}

// ReloadAll refetches every row with matching primary key column values
// and overwrites the original object slice with the newly updated slice.
func (o *MonitorAlertTriggerSlice) ReloadAll(ctx context.Context, exec boil.ContextExecutor) error {
	if o == nil || len(*o) == 0 {
		return nil
	}

	slice := MonitorAlertTriggerSlice{}
	var args []interface{}
	for _, obj := range *o {
		pkeyArgs := queries.ValuesFromMapping(reflect.Indirect(reflect.ValueOf(obj)), monitorAlertTriggerPrimaryKeyMapping)
		args = append(args, pkeyArgs...)
	}

	sql := "SELECT \"monitor_alert_triggers\".* FROM \"monitor_alert_triggers\" WHERE " +
		strmangle.WhereClauseRepeated(string(dialect.LQ), string(dialect.RQ), 1, monitorAlertTriggerPrimaryKeyColumns, len(*o))

	q := queries.Raw(sql, args...)

	err := q.Bind(ctx, exec, &slice)
	if err != nil {
		return errors.Wrap(err, "models: unable to reload all in MonitorAlertTriggerSlice")
	}

	*o = slice

	return nil
}

// MonitorAlertTriggerExists checks if the MonitorAlertTrigger row exists.
func MonitorAlertTriggerExists(ctx context.Context, exec boil.ContextExecutor, monitorID string, triggerID string) (bool, error) {
	var exists bool
	sql := "select exists(select 1 from \"monitor_alert_triggers\" where \"monitor_id\"=$1 AND \"trigger_id\"=$2 limit 1)"

	if boil.IsDebug(ctx) {
		writer := boil.DebugWriterFrom(ctx)
		fmt.Fprintln(writer, sql)
		fmt.Fprintln(writer, monitorID, triggerID)
	}
	row := exec.QueryRowContext(ctx, sql, monitorID, triggerID)

	err := row.Scan(&exists)
	if err != nil {
		return false, errors.Wrap(err, "models: unable to check if monitor_alert_triggers exists")
	}

	return exists, nil
}

// Exists checks if the MonitorAlertTrigger row exists.
func (o *MonitorAlertTrigger) Exists(ctx context.Context, exec boil.ContextExecutor) (bool, error) {
	return MonitorAlertTriggerExists(ctx, exec, o.MonitorID, o.TriggerID)
}
